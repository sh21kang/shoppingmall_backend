// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  answer: (where?: AnswerWhereInput) => Promise<boolean>;
  cart: (where?: CartWhereInput) => Promise<boolean>;
  file: (where?: FileWhereInput) => Promise<boolean>;
  notice: (where?: NoticeWhereInput) => Promise<boolean>;
  order: (where?: OrderWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  question: (where?: QuestionWhereInput) => Promise<boolean>;
  selection: (where?: SelectionWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  wishList: (where?: WishListWhereInput) => Promise<boolean>;
  tmpCart: (where?: tmpCartWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  answer: (where: AnswerWhereUniqueInput) => AnswerNullablePromise;
  answers: (args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Answer>;
  answersConnection: (args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AnswerConnectionPromise;
  cart: (where: CartWhereUniqueInput) => CartNullablePromise;
  carts: (args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Cart>;
  cartsConnection: (args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CartConnectionPromise;
  file: (where: FileWhereUniqueInput) => FileNullablePromise;
  files: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<File>;
  filesConnection: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FileConnectionPromise;
  notice: (where: NoticeWhereUniqueInput) => NoticeNullablePromise;
  notices: (args?: {
    where?: NoticeWhereInput;
    orderBy?: NoticeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Notice>;
  noticesConnection: (args?: {
    where?: NoticeWhereInput;
    orderBy?: NoticeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NoticeConnectionPromise;
  order: (where: OrderWhereUniqueInput) => OrderNullablePromise;
  orders: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Order>;
  ordersConnection: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrderConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductNullablePromise;
  products: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Product>;
  productsConnection: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductConnectionPromise;
  question: (where: QuestionWhereUniqueInput) => QuestionNullablePromise;
  questions: (args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Question>;
  questionsConnection: (args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => QuestionConnectionPromise;
  selection: (where: SelectionWhereUniqueInput) => SelectionNullablePromise;
  selections: (args?: {
    where?: SelectionWhereInput;
    orderBy?: SelectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Selection>;
  selectionsConnection: (args?: {
    where?: SelectionWhereInput;
    orderBy?: SelectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SelectionConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  wishList: (where: WishListWhereUniqueInput) => WishListNullablePromise;
  wishLists: (args?: {
    where?: WishListWhereInput;
    orderBy?: WishListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<WishList>;
  wishListsConnection: (args?: {
    where?: WishListWhereInput;
    orderBy?: WishListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WishListConnectionPromise;
  tmpCart: (where: tmpCartWhereUniqueInput) => tmpCartNullablePromise;
  tmpCarts: (args?: {
    where?: tmpCartWhereInput;
    orderBy?: tmpCartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<tmpCart>;
  tmpCartsConnection: (args?: {
    where?: tmpCartWhereInput;
    orderBy?: tmpCartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => tmpCartConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAnswer: (data: AnswerCreateInput) => AnswerPromise;
  updateAnswer: (args: {
    data: AnswerUpdateInput;
    where: AnswerWhereUniqueInput;
  }) => AnswerPromise;
  updateManyAnswers: (args: {
    data: AnswerUpdateManyMutationInput;
    where?: AnswerWhereInput;
  }) => BatchPayloadPromise;
  upsertAnswer: (args: {
    where: AnswerWhereUniqueInput;
    create: AnswerCreateInput;
    update: AnswerUpdateInput;
  }) => AnswerPromise;
  deleteAnswer: (where: AnswerWhereUniqueInput) => AnswerPromise;
  deleteManyAnswers: (where?: AnswerWhereInput) => BatchPayloadPromise;
  createCart: (data: CartCreateInput) => CartPromise;
  updateCart: (args: {
    data: CartUpdateInput;
    where: CartWhereUniqueInput;
  }) => CartPromise;
  upsertCart: (args: {
    where: CartWhereUniqueInput;
    create: CartCreateInput;
    update: CartUpdateInput;
  }) => CartPromise;
  deleteCart: (where: CartWhereUniqueInput) => CartPromise;
  deleteManyCarts: (where?: CartWhereInput) => BatchPayloadPromise;
  createFile: (data: FileCreateInput) => FilePromise;
  updateFile: (args: {
    data: FileUpdateInput;
    where: FileWhereUniqueInput;
  }) => FilePromise;
  updateManyFiles: (args: {
    data: FileUpdateManyMutationInput;
    where?: FileWhereInput;
  }) => BatchPayloadPromise;
  upsertFile: (args: {
    where: FileWhereUniqueInput;
    create: FileCreateInput;
    update: FileUpdateInput;
  }) => FilePromise;
  deleteFile: (where: FileWhereUniqueInput) => FilePromise;
  deleteManyFiles: (where?: FileWhereInput) => BatchPayloadPromise;
  createNotice: (data: NoticeCreateInput) => NoticePromise;
  updateNotice: (args: {
    data: NoticeUpdateInput;
    where: NoticeWhereUniqueInput;
  }) => NoticePromise;
  updateManyNotices: (args: {
    data: NoticeUpdateManyMutationInput;
    where?: NoticeWhereInput;
  }) => BatchPayloadPromise;
  upsertNotice: (args: {
    where: NoticeWhereUniqueInput;
    create: NoticeCreateInput;
    update: NoticeUpdateInput;
  }) => NoticePromise;
  deleteNotice: (where: NoticeWhereUniqueInput) => NoticePromise;
  deleteManyNotices: (where?: NoticeWhereInput) => BatchPayloadPromise;
  createOrder: (data: OrderCreateInput) => OrderPromise;
  updateOrder: (args: {
    data: OrderUpdateInput;
    where: OrderWhereUniqueInput;
  }) => OrderPromise;
  updateManyOrders: (args: {
    data: OrderUpdateManyMutationInput;
    where?: OrderWhereInput;
  }) => BatchPayloadPromise;
  upsertOrder: (args: {
    where: OrderWhereUniqueInput;
    create: OrderCreateInput;
    update: OrderUpdateInput;
  }) => OrderPromise;
  deleteOrder: (where: OrderWhereUniqueInput) => OrderPromise;
  deleteManyOrders: (where?: OrderWhereInput) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (args: {
    data: ProductUpdateInput;
    where: ProductWhereUniqueInput;
  }) => ProductPromise;
  updateManyProducts: (args: {
    data: ProductUpdateManyMutationInput;
    where?: ProductWhereInput;
  }) => BatchPayloadPromise;
  upsertProduct: (args: {
    where: ProductWhereUniqueInput;
    create: ProductCreateInput;
    update: ProductUpdateInput;
  }) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createQuestion: (data: QuestionCreateInput) => QuestionPromise;
  updateQuestion: (args: {
    data: QuestionUpdateInput;
    where: QuestionWhereUniqueInput;
  }) => QuestionPromise;
  updateManyQuestions: (args: {
    data: QuestionUpdateManyMutationInput;
    where?: QuestionWhereInput;
  }) => BatchPayloadPromise;
  upsertQuestion: (args: {
    where: QuestionWhereUniqueInput;
    create: QuestionCreateInput;
    update: QuestionUpdateInput;
  }) => QuestionPromise;
  deleteQuestion: (where: QuestionWhereUniqueInput) => QuestionPromise;
  deleteManyQuestions: (where?: QuestionWhereInput) => BatchPayloadPromise;
  createSelection: (data: SelectionCreateInput) => SelectionPromise;
  updateSelection: (args: {
    data: SelectionUpdateInput;
    where: SelectionWhereUniqueInput;
  }) => SelectionPromise;
  updateManySelections: (args: {
    data: SelectionUpdateManyMutationInput;
    where?: SelectionWhereInput;
  }) => BatchPayloadPromise;
  upsertSelection: (args: {
    where: SelectionWhereUniqueInput;
    create: SelectionCreateInput;
    update: SelectionUpdateInput;
  }) => SelectionPromise;
  deleteSelection: (where: SelectionWhereUniqueInput) => SelectionPromise;
  deleteManySelections: (where?: SelectionWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createWishList: (data: WishListCreateInput) => WishListPromise;
  updateWishList: (args: {
    data: WishListUpdateInput;
    where: WishListWhereUniqueInput;
  }) => WishListPromise;
  upsertWishList: (args: {
    where: WishListWhereUniqueInput;
    create: WishListCreateInput;
    update: WishListUpdateInput;
  }) => WishListPromise;
  deleteWishList: (where: WishListWhereUniqueInput) => WishListPromise;
  deleteManyWishLists: (where?: WishListWhereInput) => BatchPayloadPromise;
  createtmpCart: (data: tmpCartCreateInput) => tmpCartPromise;
  updatetmpCart: (args: {
    data: tmpCartUpdateInput;
    where: tmpCartWhereUniqueInput;
  }) => tmpCartPromise;
  upserttmpCart: (args: {
    where: tmpCartWhereUniqueInput;
    create: tmpCartCreateInput;
    update: tmpCartUpdateInput;
  }) => tmpCartPromise;
  deletetmpCart: (where: tmpCartWhereUniqueInput) => tmpCartPromise;
  deleteManytmpCarts: (where?: tmpCartWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  answer: (
    where?: AnswerSubscriptionWhereInput
  ) => AnswerSubscriptionPayloadSubscription;
  cart: (
    where?: CartSubscriptionWhereInput
  ) => CartSubscriptionPayloadSubscription;
  file: (
    where?: FileSubscriptionWhereInput
  ) => FileSubscriptionPayloadSubscription;
  notice: (
    where?: NoticeSubscriptionWhereInput
  ) => NoticeSubscriptionPayloadSubscription;
  order: (
    where?: OrderSubscriptionWhereInput
  ) => OrderSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  question: (
    where?: QuestionSubscriptionWhereInput
  ) => QuestionSubscriptionPayloadSubscription;
  selection: (
    where?: SelectionSubscriptionWhereInput
  ) => SelectionSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  wishList: (
    where?: WishListSubscriptionWhereInput
  ) => WishListSubscriptionPayloadSubscription;
  tmpCart: (
    where?: tmpCartSubscriptionWhereInput
  ) => tmpCartSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type NoticeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "subject_ASC"
  | "subject_DESC"
  | "contents_ASC"
  | "contents_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type CartOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type AnswerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "contents_ASC"
  | "contents_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type tmpCartOrderByInput = "id_ASC" | "id_DESC";

export type FileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type WishListOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type OrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "email_ASC"
  | "email_DESC"
  | "orderNumber_ASC"
  | "orderNumber_DESC"
  | "recipient_ASC"
  | "recipient_DESC"
  | "recipientPhone_ASC"
  | "recipientPhone_DESC"
  | "address_ASC"
  | "address_DESC"
  | "message_ASC"
  | "message_DESC"
  | "info_ASC"
  | "info_DESC"
  | "totalPrice_ASC"
  | "totalPrice_DESC"
  | "status_ASC"
  | "status_DESC"
  | "payment_ASC"
  | "payment_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type SelectionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "count_ASC"
  | "count_DESC"
  | "color_ASC"
  | "color_DESC"
  | "size_ASC"
  | "size_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "address_ASC"
  | "address_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "email_ASC"
  | "email_DESC"
  | "mileage_ASC"
  | "mileage_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "fromCart_ASC"
  | "fromCart_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "price_ASC"
  | "price_DESC"
  | "type_ASC"
  | "type_DESC"
  | "count_ASC"
  | "count_DESC"
  | "tags_ASC"
  | "tags_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "shippingFee_ASC"
  | "shippingFee_DESC";

export type QuestionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "QuestionType_ASC"
  | "QuestionType_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "contents_ASC"
  | "contents_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export interface FileUpdateWithWhereUniqueWithoutProductInput {
  where: FileWhereUniqueInput;
  data: FileUpdateWithoutProductDataInput;
}

export type AnswerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProductUpdatesizesInput {
  set?: Maybe<String[] | String>;
}

export interface OrderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  orderNumber?: Maybe<String>;
  orderNumber_not?: Maybe<String>;
  orderNumber_in?: Maybe<String[] | String>;
  orderNumber_not_in?: Maybe<String[] | String>;
  orderNumber_lt?: Maybe<String>;
  orderNumber_lte?: Maybe<String>;
  orderNumber_gt?: Maybe<String>;
  orderNumber_gte?: Maybe<String>;
  orderNumber_contains?: Maybe<String>;
  orderNumber_not_contains?: Maybe<String>;
  orderNumber_starts_with?: Maybe<String>;
  orderNumber_not_starts_with?: Maybe<String>;
  orderNumber_ends_with?: Maybe<String>;
  orderNumber_not_ends_with?: Maybe<String>;
  selections_every?: Maybe<SelectionWhereInput>;
  selections_some?: Maybe<SelectionWhereInput>;
  selections_none?: Maybe<SelectionWhereInput>;
  recipient?: Maybe<String>;
  recipient_not?: Maybe<String>;
  recipient_in?: Maybe<String[] | String>;
  recipient_not_in?: Maybe<String[] | String>;
  recipient_lt?: Maybe<String>;
  recipient_lte?: Maybe<String>;
  recipient_gt?: Maybe<String>;
  recipient_gte?: Maybe<String>;
  recipient_contains?: Maybe<String>;
  recipient_not_contains?: Maybe<String>;
  recipient_starts_with?: Maybe<String>;
  recipient_not_starts_with?: Maybe<String>;
  recipient_ends_with?: Maybe<String>;
  recipient_not_ends_with?: Maybe<String>;
  recipientPhone?: Maybe<String>;
  recipientPhone_not?: Maybe<String>;
  recipientPhone_in?: Maybe<String[] | String>;
  recipientPhone_not_in?: Maybe<String[] | String>;
  recipientPhone_lt?: Maybe<String>;
  recipientPhone_lte?: Maybe<String>;
  recipientPhone_gt?: Maybe<String>;
  recipientPhone_gte?: Maybe<String>;
  recipientPhone_contains?: Maybe<String>;
  recipientPhone_not_contains?: Maybe<String>;
  recipientPhone_starts_with?: Maybe<String>;
  recipientPhone_not_starts_with?: Maybe<String>;
  recipientPhone_ends_with?: Maybe<String>;
  recipientPhone_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  info?: Maybe<String>;
  info_not?: Maybe<String>;
  info_in?: Maybe<String[] | String>;
  info_not_in?: Maybe<String[] | String>;
  info_lt?: Maybe<String>;
  info_lte?: Maybe<String>;
  info_gt?: Maybe<String>;
  info_gte?: Maybe<String>;
  info_contains?: Maybe<String>;
  info_not_contains?: Maybe<String>;
  info_starts_with?: Maybe<String>;
  info_not_starts_with?: Maybe<String>;
  info_ends_with?: Maybe<String>;
  info_not_ends_with?: Maybe<String>;
  totalPrice?: Maybe<Int>;
  totalPrice_not?: Maybe<Int>;
  totalPrice_in?: Maybe<Int[] | Int>;
  totalPrice_not_in?: Maybe<Int[] | Int>;
  totalPrice_lt?: Maybe<Int>;
  totalPrice_lte?: Maybe<Int>;
  totalPrice_gt?: Maybe<Int>;
  totalPrice_gte?: Maybe<Int>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  payment?: Maybe<String>;
  payment_not?: Maybe<String>;
  payment_in?: Maybe<String[] | String>;
  payment_not_in?: Maybe<String[] | String>;
  payment_lt?: Maybe<String>;
  payment_lte?: Maybe<String>;
  payment_gt?: Maybe<String>;
  payment_gte?: Maybe<String>;
  payment_contains?: Maybe<String>;
  payment_not_contains?: Maybe<String>;
  payment_starts_with?: Maybe<String>;
  payment_not_starts_with?: Maybe<String>;
  payment_ends_with?: Maybe<String>;
  payment_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  OR?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  NOT?: Maybe<OrderWhereInput[] | OrderWhereInput>;
}

export interface SelectionCreateOneInput {
  create?: Maybe<SelectionCreateInput>;
  connect?: Maybe<SelectionWhereUniqueInput>;
}

export interface ProductCreateOneWithoutFilesInput {
  create?: Maybe<ProductCreateWithoutFilesInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface SelectionCreateInput {
  id?: Maybe<ID_Input>;
  count: Int;
  color?: Maybe<String>;
  size?: Maybe<String>;
  product?: Maybe<ProductCreateOneInput>;
}

export interface ProductUpsertNestedInput {
  update: ProductUpdateDataInput;
  create: ProductCreateInput;
}

export interface ProductCreateOneInput {
  create?: Maybe<ProductCreateInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface WishListSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WishListWhereInput>;
  AND?: Maybe<
    WishListSubscriptionWhereInput[] | WishListSubscriptionWhereInput
  >;
  OR?: Maybe<WishListSubscriptionWhereInput[] | WishListSubscriptionWhereInput>;
  NOT?: Maybe<
    WishListSubscriptionWhereInput[] | WishListSubscriptionWhereInput
  >;
}

export interface ProductCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  price?: Maybe<Int>;
  type?: Maybe<String>;
  files?: Maybe<FileCreateManyWithoutProductInput>;
  colors?: Maybe<ProductCreatecolorsInput>;
  sizes?: Maybe<ProductCreatesizesInput>;
  count?: Maybe<Int>;
  tags?: Maybe<String>;
  shippingFee?: Maybe<Int>;
}

export interface ProductWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  files_every?: Maybe<FileWhereInput>;
  files_some?: Maybe<FileWhereInput>;
  files_none?: Maybe<FileWhereInput>;
  count?: Maybe<Int>;
  count_not?: Maybe<Int>;
  count_in?: Maybe<Int[] | Int>;
  count_not_in?: Maybe<Int[] | Int>;
  count_lt?: Maybe<Int>;
  count_lte?: Maybe<Int>;
  count_gt?: Maybe<Int>;
  count_gte?: Maybe<Int>;
  tags?: Maybe<String>;
  tags_not?: Maybe<String>;
  tags_in?: Maybe<String[] | String>;
  tags_not_in?: Maybe<String[] | String>;
  tags_lt?: Maybe<String>;
  tags_lte?: Maybe<String>;
  tags_gt?: Maybe<String>;
  tags_gte?: Maybe<String>;
  tags_contains?: Maybe<String>;
  tags_not_contains?: Maybe<String>;
  tags_starts_with?: Maybe<String>;
  tags_not_starts_with?: Maybe<String>;
  tags_ends_with?: Maybe<String>;
  tags_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  shippingFee?: Maybe<Int>;
  shippingFee_not?: Maybe<Int>;
  shippingFee_in?: Maybe<Int[] | Int>;
  shippingFee_not_in?: Maybe<Int[] | Int>;
  shippingFee_lt?: Maybe<Int>;
  shippingFee_lte?: Maybe<Int>;
  shippingFee_gt?: Maybe<Int>;
  shippingFee_gte?: Maybe<Int>;
  AND?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  OR?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  NOT?: Maybe<ProductWhereInput[] | ProductWhereInput>;
}

export interface FileCreateManyWithoutProductInput {
  create?: Maybe<
    FileCreateWithoutProductInput[] | FileCreateWithoutProductInput
  >;
  connect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
}

export interface SelectionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  count?: Maybe<Int>;
  count_not?: Maybe<Int>;
  count_in?: Maybe<Int[] | Int>;
  count_not_in?: Maybe<Int[] | Int>;
  count_lt?: Maybe<Int>;
  count_lte?: Maybe<Int>;
  count_gt?: Maybe<Int>;
  count_gte?: Maybe<Int>;
  color?: Maybe<String>;
  color_not?: Maybe<String>;
  color_in?: Maybe<String[] | String>;
  color_not_in?: Maybe<String[] | String>;
  color_lt?: Maybe<String>;
  color_lte?: Maybe<String>;
  color_gt?: Maybe<String>;
  color_gte?: Maybe<String>;
  color_contains?: Maybe<String>;
  color_not_contains?: Maybe<String>;
  color_starts_with?: Maybe<String>;
  color_not_starts_with?: Maybe<String>;
  color_ends_with?: Maybe<String>;
  color_not_ends_with?: Maybe<String>;
  size?: Maybe<String>;
  size_not?: Maybe<String>;
  size_in?: Maybe<String[] | String>;
  size_not_in?: Maybe<String[] | String>;
  size_lt?: Maybe<String>;
  size_lte?: Maybe<String>;
  size_gt?: Maybe<String>;
  size_gte?: Maybe<String>;
  size_contains?: Maybe<String>;
  size_not_contains?: Maybe<String>;
  size_starts_with?: Maybe<String>;
  size_not_starts_with?: Maybe<String>;
  size_ends_with?: Maybe<String>;
  size_not_ends_with?: Maybe<String>;
  product?: Maybe<ProductWhereInput>;
  AND?: Maybe<SelectionWhereInput[] | SelectionWhereInput>;
  OR?: Maybe<SelectionWhereInput[] | SelectionWhereInput>;
  NOT?: Maybe<SelectionWhereInput[] | SelectionWhereInput>;
}

export interface FileCreateWithoutProductInput {
  id?: Maybe<ID_Input>;
  url: String;
}

export interface WishListWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  selection?: Maybe<SelectionWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<WishListWhereInput[] | WishListWhereInput>;
  OR?: Maybe<WishListWhereInput[] | WishListWhereInput>;
  NOT?: Maybe<WishListWhereInput[] | WishListWhereInput>;
}

export interface ProductCreatecolorsInput {
  set?: Maybe<String[] | String>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  mileage?: Maybe<Int>;
  mileage_not?: Maybe<Int>;
  mileage_in?: Maybe<Int[] | Int>;
  mileage_not_in?: Maybe<Int[] | Int>;
  mileage_lt?: Maybe<Int>;
  mileage_lte?: Maybe<Int>;
  mileage_gt?: Maybe<Int>;
  mileage_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  cart_every?: Maybe<CartWhereInput>;
  cart_some?: Maybe<CartWhereInput>;
  cart_none?: Maybe<CartWhereInput>;
  wish_every?: Maybe<WishListWhereInput>;
  wish_some?: Maybe<WishListWhereInput>;
  wish_none?: Maybe<WishListWhereInput>;
  buying_every?: Maybe<OrderWhereInput>;
  buying_some?: Maybe<OrderWhereInput>;
  buying_none?: Maybe<OrderWhereInput>;
  tmpOrder?: Maybe<tmpCartWhereInput>;
  fromCart?: Maybe<Boolean>;
  fromCart_not?: Maybe<Boolean>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ProductCreatesizesInput {
  set?: Maybe<String[] | String>;
}

export interface AnswerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  contents?: Maybe<String>;
  contents_not?: Maybe<String>;
  contents_in?: Maybe<String[] | String>;
  contents_not_in?: Maybe<String[] | String>;
  contents_lt?: Maybe<String>;
  contents_lte?: Maybe<String>;
  contents_gt?: Maybe<String>;
  contents_gte?: Maybe<String>;
  contents_contains?: Maybe<String>;
  contents_not_contains?: Maybe<String>;
  contents_starts_with?: Maybe<String>;
  contents_not_starts_with?: Maybe<String>;
  contents_ends_with?: Maybe<String>;
  contents_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  question?: Maybe<QuestionWhereInput>;
  AND?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
  OR?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
  NOT?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
}

export interface WishListCreateManyWithoutUserInput {
  create?: Maybe<
    WishListCreateWithoutUserInput[] | WishListCreateWithoutUserInput
  >;
  connect?: Maybe<WishListWhereUniqueInput[] | WishListWhereUniqueInput>;
}

export interface CartWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  selection?: Maybe<SelectionWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CartWhereInput[] | CartWhereInput>;
  OR?: Maybe<CartWhereInput[] | CartWhereInput>;
  NOT?: Maybe<CartWhereInput[] | CartWhereInput>;
}

export interface WishListCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  selection?: Maybe<SelectionCreateOneInput>;
}

export interface FileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FileWhereInput>;
  AND?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  OR?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  NOT?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
}

export interface OrderCreateManyWithoutUserInput {
  create?: Maybe<OrderCreateWithoutUserInput[] | OrderCreateWithoutUserInput>;
  connect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
}

export interface AnswerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AnswerWhereInput>;
  AND?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
  OR?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
  NOT?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
}

export interface OrderCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  name: String;
  phone: String;
  email: String;
  orderNumber: String;
  selections?: Maybe<SelectionCreateManyInput>;
  recipient: String;
  recipientPhone: String;
  address: String;
  message?: Maybe<String>;
  info?: Maybe<String>;
  totalPrice?: Maybe<Int>;
  status?: Maybe<String>;
  payment?: Maybe<String>;
}

export interface tmpCartUpdateInput {
  selections?: Maybe<SelectionUpdateManyInput>;
}

export interface SelectionCreateManyInput {
  create?: Maybe<SelectionCreateInput[] | SelectionCreateInput>;
  connect?: Maybe<SelectionWhereUniqueInput[] | SelectionWhereUniqueInput>;
}

export interface UserUpdateWithoutWishDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  mileage?: Maybe<Int>;
  cart?: Maybe<CartUpdateManyWithoutUserInput>;
  buying?: Maybe<OrderUpdateManyWithoutUserInput>;
  tmpOrder?: Maybe<tmpCartUpdateOneInput>;
  fromCart?: Maybe<Boolean>;
}

export interface tmpCartCreateOneInput {
  create?: Maybe<tmpCartCreateInput>;
  connect?: Maybe<tmpCartWhereUniqueInput>;
}

export interface UserUpdateOneRequiredWithoutWishInput {
  create?: Maybe<UserCreateWithoutWishInput>;
  update?: Maybe<UserUpdateWithoutWishDataInput>;
  upsert?: Maybe<UserUpsertWithoutWishInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface tmpCartCreateInput {
  id?: Maybe<ID_Input>;
  selections?: Maybe<SelectionCreateManyInput>;
}

export interface UserCreateWithoutWishInput {
  id?: Maybe<ID_Input>;
  username: String;
  password?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  mileage?: Maybe<Int>;
  cart?: Maybe<CartCreateManyWithoutUserInput>;
  buying?: Maybe<OrderCreateManyWithoutUserInput>;
  tmpOrder?: Maybe<tmpCartCreateOneInput>;
  fromCart?: Maybe<Boolean>;
}

export interface AnswerUpdateInput {
  contents?: Maybe<String>;
  question?: Maybe<QuestionUpdateOneRequiredWithoutAnswerInput>;
}

export interface UserCreateOneWithoutWishInput {
  create?: Maybe<UserCreateWithoutWishInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface QuestionUpdateOneRequiredWithoutAnswerInput {
  create?: Maybe<QuestionCreateWithoutAnswerInput>;
  update?: Maybe<QuestionUpdateWithoutAnswerDataInput>;
  upsert?: Maybe<QuestionUpsertWithoutAnswerInput>;
  connect?: Maybe<QuestionWhereUniqueInput>;
}

export interface WishListCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutWishInput;
  selection?: Maybe<SelectionCreateOneInput>;
}

export interface QuestionUpdateWithoutAnswerDataInput {
  user?: Maybe<UserUpdateOneInput>;
  QuestionType?: Maybe<String>;
  product?: Maybe<ProductUpdateOneInput>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  contents?: Maybe<String>;
}

export interface UserUpdateInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  mileage?: Maybe<Int>;
  cart?: Maybe<CartUpdateManyWithoutUserInput>;
  wish?: Maybe<WishListUpdateManyWithoutUserInput>;
  buying?: Maybe<OrderUpdateManyWithoutUserInput>;
  tmpOrder?: Maybe<tmpCartUpdateOneInput>;
  fromCart?: Maybe<Boolean>;
}

export interface UserUpdateOneInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type OrderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  mileage?: Maybe<Int>;
  cart?: Maybe<CartUpdateManyWithoutUserInput>;
  wish?: Maybe<WishListUpdateManyWithoutUserInput>;
  buying?: Maybe<OrderUpdateManyWithoutUserInput>;
  tmpOrder?: Maybe<tmpCartUpdateOneInput>;
  fromCart?: Maybe<Boolean>;
}

export interface QuestionUpdateManyMutationInput {
  QuestionType?: Maybe<String>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  contents?: Maybe<String>;
}

export interface CartUpdateManyWithoutUserInput {
  create?: Maybe<CartCreateWithoutUserInput[] | CartCreateWithoutUserInput>;
  delete?: Maybe<CartWhereUniqueInput[] | CartWhereUniqueInput>;
  connect?: Maybe<CartWhereUniqueInput[] | CartWhereUniqueInput>;
  set?: Maybe<CartWhereUniqueInput[] | CartWhereUniqueInput>;
  disconnect?: Maybe<CartWhereUniqueInput[] | CartWhereUniqueInput>;
  update?: Maybe<
    | CartUpdateWithWhereUniqueWithoutUserInput[]
    | CartUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | CartUpsertWithWhereUniqueWithoutUserInput[]
    | CartUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<CartScalarWhereInput[] | CartScalarWhereInput>;
}

export type ProductWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CartUpdateWithWhereUniqueWithoutUserInput {
  where: CartWhereUniqueInput;
  data: CartUpdateWithoutUserDataInput;
}

export interface AnswerUpdateOneWithoutQuestionInput {
  create?: Maybe<AnswerCreateWithoutQuestionInput>;
  update?: Maybe<AnswerUpdateWithoutQuestionDataInput>;
  upsert?: Maybe<AnswerUpsertWithoutQuestionInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<AnswerWhereUniqueInput>;
}

export interface CartUpdateWithoutUserDataInput {
  selection?: Maybe<SelectionUpdateOneInput>;
}

export interface AnswerCreateWithoutQuestionInput {
  id?: Maybe<ID_Input>;
  contents: String;
}

export interface SelectionUpdateOneInput {
  create?: Maybe<SelectionCreateInput>;
  update?: Maybe<SelectionUpdateDataInput>;
  upsert?: Maybe<SelectionUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SelectionWhereUniqueInput>;
}

export interface AnswerCreateOneWithoutQuestionInput {
  create?: Maybe<AnswerCreateWithoutQuestionInput>;
  connect?: Maybe<AnswerWhereUniqueInput>;
}

export interface SelectionUpdateDataInput {
  count?: Maybe<Int>;
  color?: Maybe<String>;
  size?: Maybe<String>;
  product?: Maybe<ProductUpdateOneInput>;
}

export interface ProductUpdateManyMutationInput {
  name?: Maybe<String>;
  price?: Maybe<Int>;
  type?: Maybe<String>;
  colors?: Maybe<ProductUpdatecolorsInput>;
  sizes?: Maybe<ProductUpdatesizesInput>;
  count?: Maybe<Int>;
  tags?: Maybe<String>;
  shippingFee?: Maybe<Int>;
}

export interface ProductUpdateOneInput {
  create?: Maybe<ProductCreateInput>;
  update?: Maybe<ProductUpdateDataInput>;
  upsert?: Maybe<ProductUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export type SelectionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProductUpdateDataInput {
  name?: Maybe<String>;
  price?: Maybe<Int>;
  type?: Maybe<String>;
  files?: Maybe<FileUpdateManyWithoutProductInput>;
  colors?: Maybe<ProductUpdatecolorsInput>;
  sizes?: Maybe<ProductUpdatesizesInput>;
  count?: Maybe<Int>;
  tags?: Maybe<String>;
  shippingFee?: Maybe<Int>;
}

export interface UserUpsertWithoutBuyingInput {
  update: UserUpdateWithoutBuyingDataInput;
  create: UserCreateWithoutBuyingInput;
}

export interface FileUpdateManyWithoutProductInput {
  create?: Maybe<
    FileCreateWithoutProductInput[] | FileCreateWithoutProductInput
  >;
  delete?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  connect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  set?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  disconnect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  update?: Maybe<
    | FileUpdateWithWhereUniqueWithoutProductInput[]
    | FileUpdateWithWhereUniqueWithoutProductInput
  >;
  upsert?: Maybe<
    | FileUpsertWithWhereUniqueWithoutProductInput[]
    | FileUpsertWithWhereUniqueWithoutProductInput
  >;
  deleteMany?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
  updateMany?: Maybe<
    FileUpdateManyWithWhereNestedInput[] | FileUpdateManyWithWhereNestedInput
  >;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  username?: Maybe<String>;
}>;

export interface ProductUpdateOneWithoutFilesInput {
  create?: Maybe<ProductCreateWithoutFilesInput>;
  update?: Maybe<ProductUpdateWithoutFilesDataInput>;
  upsert?: Maybe<ProductUpsertWithoutFilesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface OrderUpdateInput {
  user?: Maybe<UserUpdateOneWithoutBuyingInput>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  orderNumber?: Maybe<String>;
  selections?: Maybe<SelectionUpdateManyInput>;
  recipient?: Maybe<String>;
  recipientPhone?: Maybe<String>;
  address?: Maybe<String>;
  message?: Maybe<String>;
  info?: Maybe<String>;
  totalPrice?: Maybe<Int>;
  status?: Maybe<String>;
  payment?: Maybe<String>;
}

export interface FileUpdateWithoutProductDataInput {
  url?: Maybe<String>;
}

export interface UserCreateOneWithoutBuyingInput {
  create?: Maybe<UserCreateWithoutBuyingInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface FileUpsertWithWhereUniqueWithoutProductInput {
  where: FileWhereUniqueInput;
  update: FileUpdateWithoutProductDataInput;
  create: FileCreateWithoutProductInput;
}

export interface OrderCreateInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutBuyingInput>;
  name: String;
  phone: String;
  email: String;
  orderNumber: String;
  selections?: Maybe<SelectionCreateManyInput>;
  recipient: String;
  recipientPhone: String;
  address: String;
  message?: Maybe<String>;
  info?: Maybe<String>;
  totalPrice?: Maybe<Int>;
  status?: Maybe<String>;
  payment?: Maybe<String>;
}

export interface FileScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
  OR?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
  NOT?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
}

export interface NoticeUpdateInput {
  subject?: Maybe<String>;
  contents?: Maybe<String>;
}

export interface FileUpdateManyWithWhereNestedInput {
  where: FileScalarWhereInput;
  data: FileUpdateManyDataInput;
}

export interface NoticeCreateInput {
  id?: Maybe<ID_Input>;
  subject: String;
  contents: String;
}

export interface FileUpdateManyDataInput {
  url?: Maybe<String>;
}

export interface ProductUpsertWithoutFilesInput {
  update: ProductUpdateWithoutFilesDataInput;
  create: ProductCreateWithoutFilesInput;
}

export interface ProductUpdatecolorsInput {
  set?: Maybe<String[] | String>;
}

export interface QuestionCreateOneWithoutAnswerInput {
  create?: Maybe<QuestionCreateWithoutAnswerInput>;
  connect?: Maybe<QuestionWhereUniqueInput>;
}

export interface tmpCartWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  selections_every?: Maybe<SelectionWhereInput>;
  selections_some?: Maybe<SelectionWhereInput>;
  selections_none?: Maybe<SelectionWhereInput>;
  AND?: Maybe<tmpCartWhereInput[] | tmpCartWhereInput>;
  OR?: Maybe<tmpCartWhereInput[] | tmpCartWhereInput>;
  NOT?: Maybe<tmpCartWhereInput[] | tmpCartWhereInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface FileWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  product?: Maybe<ProductWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<FileWhereInput[] | FileWhereInput>;
  OR?: Maybe<FileWhereInput[] | FileWhereInput>;
  NOT?: Maybe<FileWhereInput[] | FileWhereInput>;
}

export interface CartCreateManyWithoutUserInput {
  create?: Maybe<CartCreateWithoutUserInput[] | CartCreateWithoutUserInput>;
  connect?: Maybe<CartWhereUniqueInput[] | CartWhereUniqueInput>;
}

export interface SelectionUpsertNestedInput {
  update: SelectionUpdateDataInput;
  create: SelectionCreateInput;
}

export interface tmpCartSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<tmpCartWhereInput>;
  AND?: Maybe<tmpCartSubscriptionWhereInput[] | tmpCartSubscriptionWhereInput>;
  OR?: Maybe<tmpCartSubscriptionWhereInput[] | tmpCartSubscriptionWhereInput>;
  NOT?: Maybe<tmpCartSubscriptionWhereInput[] | tmpCartSubscriptionWhereInput>;
}

export interface CartUpsertWithWhereUniqueWithoutUserInput {
  where: CartWhereUniqueInput;
  update: CartUpdateWithoutUserDataInput;
  create: CartCreateWithoutUserInput;
}

export interface SelectionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SelectionWhereInput>;
  AND?: Maybe<
    SelectionSubscriptionWhereInput[] | SelectionSubscriptionWhereInput
  >;
  OR?: Maybe<
    SelectionSubscriptionWhereInput[] | SelectionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    SelectionSubscriptionWhereInput[] | SelectionSubscriptionWhereInput
  >;
}

export interface CartScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CartScalarWhereInput[] | CartScalarWhereInput>;
  OR?: Maybe<CartScalarWhereInput[] | CartScalarWhereInput>;
  NOT?: Maybe<CartScalarWhereInput[] | CartScalarWhereInput>;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  OR?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  NOT?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
}

export interface WishListUpdateManyWithoutUserInput {
  create?: Maybe<
    WishListCreateWithoutUserInput[] | WishListCreateWithoutUserInput
  >;
  delete?: Maybe<WishListWhereUniqueInput[] | WishListWhereUniqueInput>;
  connect?: Maybe<WishListWhereUniqueInput[] | WishListWhereUniqueInput>;
  set?: Maybe<WishListWhereUniqueInput[] | WishListWhereUniqueInput>;
  disconnect?: Maybe<WishListWhereUniqueInput[] | WishListWhereUniqueInput>;
  update?: Maybe<
    | WishListUpdateWithWhereUniqueWithoutUserInput[]
    | WishListUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | WishListUpsertWithWhereUniqueWithoutUserInput[]
    | WishListUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<WishListScalarWhereInput[] | WishListScalarWhereInput>;
}

export interface QuestionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  QuestionType?: Maybe<String>;
  QuestionType_not?: Maybe<String>;
  QuestionType_in?: Maybe<String[] | String>;
  QuestionType_not_in?: Maybe<String[] | String>;
  QuestionType_lt?: Maybe<String>;
  QuestionType_lte?: Maybe<String>;
  QuestionType_gt?: Maybe<String>;
  QuestionType_gte?: Maybe<String>;
  QuestionType_contains?: Maybe<String>;
  QuestionType_not_contains?: Maybe<String>;
  QuestionType_starts_with?: Maybe<String>;
  QuestionType_not_starts_with?: Maybe<String>;
  QuestionType_ends_with?: Maybe<String>;
  QuestionType_not_ends_with?: Maybe<String>;
  product?: Maybe<ProductWhereInput>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  contents?: Maybe<String>;
  contents_not?: Maybe<String>;
  contents_in?: Maybe<String[] | String>;
  contents_not_in?: Maybe<String[] | String>;
  contents_lt?: Maybe<String>;
  contents_lte?: Maybe<String>;
  contents_gt?: Maybe<String>;
  contents_gte?: Maybe<String>;
  contents_contains?: Maybe<String>;
  contents_not_contains?: Maybe<String>;
  contents_starts_with?: Maybe<String>;
  contents_not_starts_with?: Maybe<String>;
  contents_ends_with?: Maybe<String>;
  contents_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  answer?: Maybe<AnswerWhereInput>;
  AND?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
  OR?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
  NOT?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
}

export interface WishListUpdateWithWhereUniqueWithoutUserInput {
  where: WishListWhereUniqueInput;
  data: WishListUpdateWithoutUserDataInput;
}

export interface CartSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CartWhereInput>;
  AND?: Maybe<CartSubscriptionWhereInput[] | CartSubscriptionWhereInput>;
  OR?: Maybe<CartSubscriptionWhereInput[] | CartSubscriptionWhereInput>;
  NOT?: Maybe<CartSubscriptionWhereInput[] | CartSubscriptionWhereInput>;
}

export interface WishListUpdateWithoutUserDataInput {
  selection?: Maybe<SelectionUpdateOneInput>;
}

export interface UserUpsertWithoutWishInput {
  update: UserUpdateWithoutWishDataInput;
  create: UserCreateWithoutWishInput;
}

export interface WishListUpsertWithWhereUniqueWithoutUserInput {
  where: WishListWhereUniqueInput;
  update: WishListUpdateWithoutUserDataInput;
  create: WishListCreateWithoutUserInput;
}

export interface WishListUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutWishInput>;
  selection?: Maybe<SelectionUpdateOneInput>;
}

export interface WishListScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<WishListScalarWhereInput[] | WishListScalarWhereInput>;
  OR?: Maybe<WishListScalarWhereInput[] | WishListScalarWhereInput>;
  NOT?: Maybe<WishListScalarWhereInput[] | WishListScalarWhereInput>;
}

export interface NoticeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  subject?: Maybe<String>;
  subject_not?: Maybe<String>;
  subject_in?: Maybe<String[] | String>;
  subject_not_in?: Maybe<String[] | String>;
  subject_lt?: Maybe<String>;
  subject_lte?: Maybe<String>;
  subject_gt?: Maybe<String>;
  subject_gte?: Maybe<String>;
  subject_contains?: Maybe<String>;
  subject_not_contains?: Maybe<String>;
  subject_starts_with?: Maybe<String>;
  subject_not_starts_with?: Maybe<String>;
  subject_ends_with?: Maybe<String>;
  subject_not_ends_with?: Maybe<String>;
  contents?: Maybe<String>;
  contents_not?: Maybe<String>;
  contents_in?: Maybe<String[] | String>;
  contents_not_in?: Maybe<String[] | String>;
  contents_lt?: Maybe<String>;
  contents_lte?: Maybe<String>;
  contents_gt?: Maybe<String>;
  contents_gte?: Maybe<String>;
  contents_contains?: Maybe<String>;
  contents_not_contains?: Maybe<String>;
  contents_starts_with?: Maybe<String>;
  contents_not_starts_with?: Maybe<String>;
  contents_ends_with?: Maybe<String>;
  contents_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<NoticeWhereInput[] | NoticeWhereInput>;
  OR?: Maybe<NoticeWhereInput[] | NoticeWhereInput>;
  NOT?: Maybe<NoticeWhereInput[] | NoticeWhereInput>;
}

export interface OrderUpdateManyWithoutUserInput {
  create?: Maybe<OrderCreateWithoutUserInput[] | OrderCreateWithoutUserInput>;
  delete?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  connect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  set?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  disconnect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  update?: Maybe<
    | OrderUpdateWithWhereUniqueWithoutUserInput[]
    | OrderUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | OrderUpsertWithWhereUniqueWithoutUserInput[]
    | OrderUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  updateMany?: Maybe<
    OrderUpdateManyWithWhereNestedInput[] | OrderUpdateManyWithWhereNestedInput
  >;
}

export interface SelectionUpdateManyMutationInput {
  count?: Maybe<Int>;
  color?: Maybe<String>;
  size?: Maybe<String>;
}

export interface OrderUpdateWithWhereUniqueWithoutUserInput {
  where: OrderWhereUniqueInput;
  data: OrderUpdateWithoutUserDataInput;
}

export interface AnswerUpsertWithoutQuestionInput {
  update: AnswerUpdateWithoutQuestionDataInput;
  create: AnswerCreateWithoutQuestionInput;
}

export interface OrderUpdateWithoutUserDataInput {
  name?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  orderNumber?: Maybe<String>;
  selections?: Maybe<SelectionUpdateManyInput>;
  recipient?: Maybe<String>;
  recipientPhone?: Maybe<String>;
  address?: Maybe<String>;
  message?: Maybe<String>;
  info?: Maybe<String>;
  totalPrice?: Maybe<Int>;
  status?: Maybe<String>;
  payment?: Maybe<String>;
}

export interface QuestionUpdateInput {
  user?: Maybe<UserUpdateOneInput>;
  QuestionType?: Maybe<String>;
  product?: Maybe<ProductUpdateOneInput>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  contents?: Maybe<String>;
  answer?: Maybe<AnswerUpdateOneWithoutQuestionInput>;
}

export interface SelectionUpdateManyInput {
  create?: Maybe<SelectionCreateInput[] | SelectionCreateInput>;
  update?: Maybe<
    | SelectionUpdateWithWhereUniqueNestedInput[]
    | SelectionUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | SelectionUpsertWithWhereUniqueNestedInput[]
    | SelectionUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<SelectionWhereUniqueInput[] | SelectionWhereUniqueInput>;
  connect?: Maybe<SelectionWhereUniqueInput[] | SelectionWhereUniqueInput>;
  set?: Maybe<SelectionWhereUniqueInput[] | SelectionWhereUniqueInput>;
  disconnect?: Maybe<SelectionWhereUniqueInput[] | SelectionWhereUniqueInput>;
  deleteMany?: Maybe<SelectionScalarWhereInput[] | SelectionScalarWhereInput>;
  updateMany?: Maybe<
    | SelectionUpdateManyWithWhereNestedInput[]
    | SelectionUpdateManyWithWhereNestedInput
  >;
}

export interface QuestionCreateInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneInput>;
  QuestionType: String;
  product?: Maybe<ProductCreateOneInput>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  contents: String;
  answer?: Maybe<AnswerCreateOneWithoutQuestionInput>;
}

export interface SelectionUpdateWithWhereUniqueNestedInput {
  where: SelectionWhereUniqueInput;
  data: SelectionUpdateDataInput;
}

export interface OrderUpdateManyMutationInput {
  name?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  orderNumber?: Maybe<String>;
  recipient?: Maybe<String>;
  recipientPhone?: Maybe<String>;
  address?: Maybe<String>;
  message?: Maybe<String>;
  info?: Maybe<String>;
  totalPrice?: Maybe<Int>;
  status?: Maybe<String>;
  payment?: Maybe<String>;
}

export interface SelectionUpsertWithWhereUniqueNestedInput {
  where: SelectionWhereUniqueInput;
  update: SelectionUpdateDataInput;
  create: SelectionCreateInput;
}

export interface UserUpdateOneWithoutBuyingInput {
  create?: Maybe<UserCreateWithoutBuyingInput>;
  update?: Maybe<UserUpdateWithoutBuyingDataInput>;
  upsert?: Maybe<UserUpsertWithoutBuyingInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface SelectionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  count?: Maybe<Int>;
  count_not?: Maybe<Int>;
  count_in?: Maybe<Int[] | Int>;
  count_not_in?: Maybe<Int[] | Int>;
  count_lt?: Maybe<Int>;
  count_lte?: Maybe<Int>;
  count_gt?: Maybe<Int>;
  count_gte?: Maybe<Int>;
  color?: Maybe<String>;
  color_not?: Maybe<String>;
  color_in?: Maybe<String[] | String>;
  color_not_in?: Maybe<String[] | String>;
  color_lt?: Maybe<String>;
  color_lte?: Maybe<String>;
  color_gt?: Maybe<String>;
  color_gte?: Maybe<String>;
  color_contains?: Maybe<String>;
  color_not_contains?: Maybe<String>;
  color_starts_with?: Maybe<String>;
  color_not_starts_with?: Maybe<String>;
  color_ends_with?: Maybe<String>;
  color_not_ends_with?: Maybe<String>;
  size?: Maybe<String>;
  size_not?: Maybe<String>;
  size_in?: Maybe<String[] | String>;
  size_not_in?: Maybe<String[] | String>;
  size_lt?: Maybe<String>;
  size_lte?: Maybe<String>;
  size_gt?: Maybe<String>;
  size_gte?: Maybe<String>;
  size_contains?: Maybe<String>;
  size_not_contains?: Maybe<String>;
  size_starts_with?: Maybe<String>;
  size_not_starts_with?: Maybe<String>;
  size_ends_with?: Maybe<String>;
  size_not_ends_with?: Maybe<String>;
  AND?: Maybe<SelectionScalarWhereInput[] | SelectionScalarWhereInput>;
  OR?: Maybe<SelectionScalarWhereInput[] | SelectionScalarWhereInput>;
  NOT?: Maybe<SelectionScalarWhereInput[] | SelectionScalarWhereInput>;
}

export type WishListWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SelectionUpdateManyWithWhereNestedInput {
  where: SelectionScalarWhereInput;
  data: SelectionUpdateManyDataInput;
}

export type tmpCartWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SelectionUpdateManyDataInput {
  count?: Maybe<Int>;
  color?: Maybe<String>;
  size?: Maybe<String>;
}

export interface ProductUpdateWithoutFilesDataInput {
  name?: Maybe<String>;
  price?: Maybe<Int>;
  type?: Maybe<String>;
  colors?: Maybe<ProductUpdatecolorsInput>;
  sizes?: Maybe<ProductUpdatesizesInput>;
  count?: Maybe<Int>;
  tags?: Maybe<String>;
  shippingFee?: Maybe<Int>;
}

export interface OrderUpsertWithWhereUniqueWithoutUserInput {
  where: OrderWhereUniqueInput;
  update: OrderUpdateWithoutUserDataInput;
  create: OrderCreateWithoutUserInput;
}

export interface QuestionCreateWithoutAnswerInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneInput>;
  QuestionType: String;
  product?: Maybe<ProductCreateOneInput>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  contents: String;
}

export interface OrderScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  orderNumber?: Maybe<String>;
  orderNumber_not?: Maybe<String>;
  orderNumber_in?: Maybe<String[] | String>;
  orderNumber_not_in?: Maybe<String[] | String>;
  orderNumber_lt?: Maybe<String>;
  orderNumber_lte?: Maybe<String>;
  orderNumber_gt?: Maybe<String>;
  orderNumber_gte?: Maybe<String>;
  orderNumber_contains?: Maybe<String>;
  orderNumber_not_contains?: Maybe<String>;
  orderNumber_starts_with?: Maybe<String>;
  orderNumber_not_starts_with?: Maybe<String>;
  orderNumber_ends_with?: Maybe<String>;
  orderNumber_not_ends_with?: Maybe<String>;
  recipient?: Maybe<String>;
  recipient_not?: Maybe<String>;
  recipient_in?: Maybe<String[] | String>;
  recipient_not_in?: Maybe<String[] | String>;
  recipient_lt?: Maybe<String>;
  recipient_lte?: Maybe<String>;
  recipient_gt?: Maybe<String>;
  recipient_gte?: Maybe<String>;
  recipient_contains?: Maybe<String>;
  recipient_not_contains?: Maybe<String>;
  recipient_starts_with?: Maybe<String>;
  recipient_not_starts_with?: Maybe<String>;
  recipient_ends_with?: Maybe<String>;
  recipient_not_ends_with?: Maybe<String>;
  recipientPhone?: Maybe<String>;
  recipientPhone_not?: Maybe<String>;
  recipientPhone_in?: Maybe<String[] | String>;
  recipientPhone_not_in?: Maybe<String[] | String>;
  recipientPhone_lt?: Maybe<String>;
  recipientPhone_lte?: Maybe<String>;
  recipientPhone_gt?: Maybe<String>;
  recipientPhone_gte?: Maybe<String>;
  recipientPhone_contains?: Maybe<String>;
  recipientPhone_not_contains?: Maybe<String>;
  recipientPhone_starts_with?: Maybe<String>;
  recipientPhone_not_starts_with?: Maybe<String>;
  recipientPhone_ends_with?: Maybe<String>;
  recipientPhone_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  info?: Maybe<String>;
  info_not?: Maybe<String>;
  info_in?: Maybe<String[] | String>;
  info_not_in?: Maybe<String[] | String>;
  info_lt?: Maybe<String>;
  info_lte?: Maybe<String>;
  info_gt?: Maybe<String>;
  info_gte?: Maybe<String>;
  info_contains?: Maybe<String>;
  info_not_contains?: Maybe<String>;
  info_starts_with?: Maybe<String>;
  info_not_starts_with?: Maybe<String>;
  info_ends_with?: Maybe<String>;
  info_not_ends_with?: Maybe<String>;
  totalPrice?: Maybe<Int>;
  totalPrice_not?: Maybe<Int>;
  totalPrice_in?: Maybe<Int[] | Int>;
  totalPrice_not_in?: Maybe<Int[] | Int>;
  totalPrice_lt?: Maybe<Int>;
  totalPrice_lte?: Maybe<Int>;
  totalPrice_gt?: Maybe<Int>;
  totalPrice_gte?: Maybe<Int>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  payment?: Maybe<String>;
  payment_not?: Maybe<String>;
  payment_in?: Maybe<String[] | String>;
  payment_not_in?: Maybe<String[] | String>;
  payment_lt?: Maybe<String>;
  payment_lte?: Maybe<String>;
  payment_gt?: Maybe<String>;
  payment_gte?: Maybe<String>;
  payment_contains?: Maybe<String>;
  payment_not_contains?: Maybe<String>;
  payment_starts_with?: Maybe<String>;
  payment_not_starts_with?: Maybe<String>;
  payment_ends_with?: Maybe<String>;
  payment_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  OR?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  NOT?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
}

export interface CartCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  selection?: Maybe<SelectionCreateOneInput>;
}

export interface OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput;
  data: OrderUpdateManyDataInput;
}

export interface QuestionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<QuestionWhereInput>;
  AND?: Maybe<
    QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput
  >;
  OR?: Maybe<QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput>;
  NOT?: Maybe<
    QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput
  >;
}

export interface OrderUpdateManyDataInput {
  name?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  orderNumber?: Maybe<String>;
  recipient?: Maybe<String>;
  recipientPhone?: Maybe<String>;
  address?: Maybe<String>;
  message?: Maybe<String>;
  info?: Maybe<String>;
  totalPrice?: Maybe<Int>;
  status?: Maybe<String>;
  payment?: Maybe<String>;
}

export interface NoticeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NoticeWhereInput>;
  AND?: Maybe<NoticeSubscriptionWhereInput[] | NoticeSubscriptionWhereInput>;
  OR?: Maybe<NoticeSubscriptionWhereInput[] | NoticeSubscriptionWhereInput>;
  NOT?: Maybe<NoticeSubscriptionWhereInput[] | NoticeSubscriptionWhereInput>;
}

export interface tmpCartUpdateOneInput {
  create?: Maybe<tmpCartCreateInput>;
  update?: Maybe<tmpCartUpdateDataInput>;
  upsert?: Maybe<tmpCartUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<tmpCartWhereUniqueInput>;
}

export type FileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface tmpCartUpdateDataInput {
  selections?: Maybe<SelectionUpdateManyInput>;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  mileage?: Maybe<Int>;
  fromCart?: Maybe<Boolean>;
}

export interface tmpCartUpsertNestedInput {
  update: tmpCartUpdateDataInput;
  create: tmpCartCreateInput;
}

export interface AnswerUpdateWithoutQuestionDataInput {
  contents?: Maybe<String>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ProductUpdateInput {
  name?: Maybe<String>;
  price?: Maybe<Int>;
  type?: Maybe<String>;
  files?: Maybe<FileUpdateManyWithoutProductInput>;
  colors?: Maybe<ProductUpdatecolorsInput>;
  sizes?: Maybe<ProductUpdatesizesInput>;
  count?: Maybe<Int>;
  tags?: Maybe<String>;
  shippingFee?: Maybe<Int>;
}

export interface QuestionUpsertWithoutAnswerInput {
  update: QuestionUpdateWithoutAnswerDataInput;
  create: QuestionCreateWithoutAnswerInput;
}

export interface UserCreateWithoutBuyingInput {
  id?: Maybe<ID_Input>;
  username: String;
  password?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  mileage?: Maybe<Int>;
  cart?: Maybe<CartCreateManyWithoutUserInput>;
  wish?: Maybe<WishListCreateManyWithoutUserInput>;
  tmpOrder?: Maybe<tmpCartCreateOneInput>;
  fromCart?: Maybe<Boolean>;
}

export interface AnswerUpdateManyMutationInput {
  contents?: Maybe<String>;
}

export interface FileUpdateManyMutationInput {
  url?: Maybe<String>;
}

export interface FileUpdateInput {
  url?: Maybe<String>;
  product?: Maybe<ProductUpdateOneWithoutFilesInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  username: String;
  password?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  mileage?: Maybe<Int>;
  cart?: Maybe<CartCreateManyWithoutUserInput>;
  wish?: Maybe<WishListCreateManyWithoutUserInput>;
  buying?: Maybe<OrderCreateManyWithoutUserInput>;
  tmpOrder?: Maybe<tmpCartCreateOneInput>;
  fromCart?: Maybe<Boolean>;
}

export interface ProductCreateWithoutFilesInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  price?: Maybe<Int>;
  type?: Maybe<String>;
  colors?: Maybe<ProductCreatecolorsInput>;
  sizes?: Maybe<ProductCreatesizesInput>;
  count?: Maybe<Int>;
  tags?: Maybe<String>;
  shippingFee?: Maybe<Int>;
}

export interface OrderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrderWhereInput>;
  AND?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  OR?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  NOT?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
}

export interface CartCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutCartInput;
  selection?: Maybe<SelectionCreateOneInput>;
}

export type NoticeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserCreateOneWithoutCartInput {
  create?: Maybe<UserCreateWithoutCartInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type QuestionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserCreateWithoutCartInput {
  id?: Maybe<ID_Input>;
  username: String;
  password?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  mileage?: Maybe<Int>;
  wish?: Maybe<WishListCreateManyWithoutUserInput>;
  buying?: Maybe<OrderCreateManyWithoutUserInput>;
  tmpOrder?: Maybe<tmpCartCreateOneInput>;
  fromCart?: Maybe<Boolean>;
}

export interface NoticeUpdateManyMutationInput {
  subject?: Maybe<String>;
  contents?: Maybe<String>;
}

export interface CartUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutCartInput>;
  selection?: Maybe<SelectionUpdateOneInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface FileCreateInput {
  id?: Maybe<ID_Input>;
  url: String;
  product?: Maybe<ProductCreateOneWithoutFilesInput>;
}

export interface UserUpsertWithoutCartInput {
  update: UserUpdateWithoutCartDataInput;
  create: UserCreateWithoutCartInput;
}

export interface UserUpdateWithoutCartDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  mileage?: Maybe<Int>;
  wish?: Maybe<WishListUpdateManyWithoutUserInput>;
  buying?: Maybe<OrderUpdateManyWithoutUserInput>;
  tmpOrder?: Maybe<tmpCartUpdateOneInput>;
  fromCart?: Maybe<Boolean>;
}

export interface UserUpdateOneRequiredWithoutCartInput {
  create?: Maybe<UserCreateWithoutCartInput>;
  update?: Maybe<UserUpdateWithoutCartDataInput>;
  upsert?: Maybe<UserUpsertWithoutCartInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type CartWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AnswerCreateInput {
  id?: Maybe<ID_Input>;
  contents: String;
  question: QuestionCreateOneWithoutAnswerInput;
}

export interface UserUpdateWithoutBuyingDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  mileage?: Maybe<Int>;
  cart?: Maybe<CartUpdateManyWithoutUserInput>;
  wish?: Maybe<WishListUpdateManyWithoutUserInput>;
  tmpOrder?: Maybe<tmpCartUpdateOneInput>;
  fromCart?: Maybe<Boolean>;
}

export interface SelectionUpdateInput {
  count?: Maybe<Int>;
  color?: Maybe<String>;
  size?: Maybe<String>;
  product?: Maybe<ProductUpdateOneInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface tmpCartPreviousValues {
  id: ID_Output;
}

export interface tmpCartPreviousValuesPromise
  extends Promise<tmpCartPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface tmpCartPreviousValuesSubscription
  extends Promise<AsyncIterator<tmpCartPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface FileEdge {
  node: File;
  cursor: String;
}

export interface FileEdgePromise extends Promise<FileEdge>, Fragmentable {
  node: <T = FilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FileEdgeSubscription
  extends Promise<AsyncIterator<FileEdge>>,
    Fragmentable {
  node: <T = FileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Selection {
  id: ID_Output;
  count: Int;
  color?: String;
  size?: String;
}

export interface SelectionPromise extends Promise<Selection>, Fragmentable {
  id: () => Promise<ID_Output>;
  count: () => Promise<Int>;
  color: () => Promise<String>;
  size: () => Promise<String>;
  product: <T = ProductPromise>() => T;
}

export interface SelectionSubscription
  extends Promise<AsyncIterator<Selection>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  count: () => Promise<AsyncIterator<Int>>;
  color: () => Promise<AsyncIterator<String>>;
  size: () => Promise<AsyncIterator<String>>;
  product: <T = ProductSubscription>() => T;
}

export interface SelectionNullablePromise
  extends Promise<Selection | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  count: () => Promise<Int>;
  color: () => Promise<String>;
  size: () => Promise<String>;
  product: <T = ProductPromise>() => T;
}

export interface FileConnection {
  pageInfo: PageInfo;
  edges: FileEdge[];
}

export interface FileConnectionPromise
  extends Promise<FileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FileEdge>>() => T;
  aggregate: <T = AggregateFilePromise>() => T;
}

export interface FileConnectionSubscription
  extends Promise<AsyncIterator<FileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFileSubscription>() => T;
}

export interface AggregateCart {
  count: Int;
}

export interface AggregateCartPromise
  extends Promise<AggregateCart>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCartSubscription
  extends Promise<AsyncIterator<AggregateCart>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregatetmpCart {
  count: Int;
}

export interface AggregatetmpCartPromise
  extends Promise<AggregatetmpCart>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatetmpCartSubscription
  extends Promise<AsyncIterator<AggregatetmpCart>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CartEdge {
  node: Cart;
  cursor: String;
}

export interface CartEdgePromise extends Promise<CartEdge>, Fragmentable {
  node: <T = CartPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CartEdgeSubscription
  extends Promise<AsyncIterator<CartEdge>>,
    Fragmentable {
  node: <T = CartSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface tmpCartConnection {
  pageInfo: PageInfo;
  edges: tmpCartEdge[];
}

export interface tmpCartConnectionPromise
  extends Promise<tmpCartConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<tmpCartEdge>>() => T;
  aggregate: <T = AggregatetmpCartPromise>() => T;
}

export interface tmpCartConnectionSubscription
  extends Promise<AsyncIterator<tmpCartConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<tmpCartEdgeSubscription>>>() => T;
  aggregate: <T = AggregatetmpCartSubscription>() => T;
}

export interface CartConnection {
  pageInfo: PageInfo;
  edges: CartEdge[];
}

export interface CartConnectionPromise
  extends Promise<CartConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CartEdge>>() => T;
  aggregate: <T = AggregateCartPromise>() => T;
}

export interface CartConnectionSubscription
  extends Promise<AsyncIterator<CartConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CartEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCartSubscription>() => T;
}

export interface AggregateWishList {
  count: Int;
}

export interface AggregateWishListPromise
  extends Promise<AggregateWishList>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWishListSubscription
  extends Promise<AsyncIterator<AggregateWishList>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateAnswer {
  count: Int;
}

export interface AggregateAnswerPromise
  extends Promise<AggregateAnswer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAnswerSubscription
  extends Promise<AsyncIterator<AggregateAnswer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WishListConnection {
  pageInfo: PageInfo;
  edges: WishListEdge[];
}

export interface WishListConnectionPromise
  extends Promise<WishListConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WishListEdge>>() => T;
  aggregate: <T = AggregateWishListPromise>() => T;
}

export interface WishListConnectionSubscription
  extends Promise<AsyncIterator<WishListConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WishListEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWishListSubscription>() => T;
}

export interface Answer {
  id: ID_Output;
  contents: String;
  createdAt: DateTimeOutput;
}

export interface AnswerPromise extends Promise<Answer>, Fragmentable {
  id: () => Promise<ID_Output>;
  contents: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  question: <T = QuestionPromise>() => T;
}

export interface AnswerSubscription
  extends Promise<AsyncIterator<Answer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  contents: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  question: <T = QuestionSubscription>() => T;
}

export interface AnswerNullablePromise
  extends Promise<Answer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  contents: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  question: <T = QuestionPromise>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AnswerSubscriptionPayload {
  mutation: MutationType;
  node: Answer;
  updatedFields: String[];
  previousValues: AnswerPreviousValues;
}

export interface AnswerSubscriptionPayloadPromise
  extends Promise<AnswerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AnswerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AnswerPreviousValuesPromise>() => T;
}

export interface AnswerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AnswerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AnswerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AnswerPreviousValuesSubscription>() => T;
}

export interface WishListPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
}

export interface WishListPreviousValuesPromise
  extends Promise<WishListPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface WishListPreviousValuesSubscription
  extends Promise<AsyncIterator<WishListPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AnswerPreviousValues {
  id: ID_Output;
  contents: String;
  createdAt: DateTimeOutput;
}

export interface AnswerPreviousValuesPromise
  extends Promise<AnswerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  contents: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AnswerPreviousValuesSubscription
  extends Promise<AsyncIterator<AnswerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  contents: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SelectionEdge {
  node: Selection;
  cursor: String;
}

export interface SelectionEdgePromise
  extends Promise<SelectionEdge>,
    Fragmentable {
  node: <T = SelectionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SelectionEdgeSubscription
  extends Promise<AsyncIterator<SelectionEdge>>,
    Fragmentable {
  node: <T = SelectionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AnswerEdge {
  node: Answer;
  cursor: String;
}

export interface AnswerEdgePromise extends Promise<AnswerEdge>, Fragmentable {
  node: <T = AnswerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AnswerEdgeSubscription
  extends Promise<AsyncIterator<AnswerEdge>>,
    Fragmentable {
  node: <T = AnswerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateQuestion {
  count: Int;
}

export interface AggregateQuestionPromise
  extends Promise<AggregateQuestion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQuestionSubscription
  extends Promise<AsyncIterator<AggregateQuestion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CartSubscriptionPayload {
  mutation: MutationType;
  node: Cart;
  updatedFields: String[];
  previousValues: CartPreviousValues;
}

export interface CartSubscriptionPayloadPromise
  extends Promise<CartSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CartPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CartPreviousValuesPromise>() => T;
}

export interface CartSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CartSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CartSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CartPreviousValuesSubscription>() => T;
}

export interface QuestionConnection {
  pageInfo: PageInfo;
  edges: QuestionEdge[];
}

export interface QuestionConnectionPromise
  extends Promise<QuestionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<QuestionEdge>>() => T;
  aggregate: <T = AggregateQuestionPromise>() => T;
}

export interface QuestionConnectionSubscription
  extends Promise<AsyncIterator<QuestionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QuestionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQuestionSubscription>() => T;
}

export interface CartPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
}

export interface CartPreviousValuesPromise
  extends Promise<CartPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CartPreviousValuesSubscription
  extends Promise<AsyncIterator<CartPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface FileSubscriptionPayload {
  mutation: MutationType;
  node: File;
  updatedFields: String[];
  previousValues: FilePreviousValues;
}

export interface FileSubscriptionPayloadPromise
  extends Promise<FileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FilePreviousValuesPromise>() => T;
}

export interface FileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FilePreviousValuesSubscription>() => T;
}

export interface AggregateOrder {
  count: Int;
}

export interface AggregateOrderPromise
  extends Promise<AggregateOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderSubscription
  extends Promise<AsyncIterator<AggregateOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FilePreviousValues {
  id: ID_Output;
  url: String;
  createdAt: DateTimeOutput;
}

export interface FilePreviousValuesPromise
  extends Promise<FilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface FilePreviousValuesSubscription
  extends Promise<AsyncIterator<FilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrderConnection {
  pageInfo: PageInfo;
  edges: OrderEdge[];
}

export interface OrderConnectionPromise
  extends Promise<OrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEdge>>() => T;
  aggregate: <T = AggregateOrderPromise>() => T;
}

export interface OrderConnectionSubscription
  extends Promise<AsyncIterator<OrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderSubscription>() => T;
}

export interface AnswerConnection {
  pageInfo: PageInfo;
  edges: AnswerEdge[];
}

export interface AnswerConnectionPromise
  extends Promise<AnswerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AnswerEdge>>() => T;
  aggregate: <T = AggregateAnswerPromise>() => T;
}

export interface AnswerConnectionSubscription
  extends Promise<AsyncIterator<AnswerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AnswerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAnswerSubscription>() => T;
}

export interface NoticeEdge {
  node: Notice;
  cursor: String;
}

export interface NoticeEdgePromise extends Promise<NoticeEdge>, Fragmentable {
  node: <T = NoticePromise>() => T;
  cursor: () => Promise<String>;
}

export interface NoticeEdgeSubscription
  extends Promise<AsyncIterator<NoticeEdge>>,
    Fragmentable {
  node: <T = NoticeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NoticeSubscriptionPayload {
  mutation: MutationType;
  node: Notice;
  updatedFields: String[];
  previousValues: NoticePreviousValues;
}

export interface NoticeSubscriptionPayloadPromise
  extends Promise<NoticeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NoticePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NoticePreviousValuesPromise>() => T;
}

export interface NoticeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NoticeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NoticeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NoticePreviousValuesSubscription>() => T;
}

export interface WishListSubscriptionPayload {
  mutation: MutationType;
  node: WishList;
  updatedFields: String[];
  previousValues: WishListPreviousValues;
}

export interface WishListSubscriptionPayloadPromise
  extends Promise<WishListSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WishListPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WishListPreviousValuesPromise>() => T;
}

export interface WishListSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WishListSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WishListSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WishListPreviousValuesSubscription>() => T;
}

export interface NoticePreviousValues {
  id: ID_Output;
  subject: String;
  contents: String;
  createdAt: DateTimeOutput;
}

export interface NoticePreviousValuesPromise
  extends Promise<NoticePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  subject: () => Promise<String>;
  contents: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface NoticePreviousValuesSubscription
  extends Promise<AsyncIterator<NoticePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  subject: () => Promise<AsyncIterator<String>>;
  contents: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateFile {
  count: Int;
}

export interface AggregateFilePromise
  extends Promise<AggregateFile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFileSubscription
  extends Promise<AsyncIterator<AggregateFile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface tmpCart {
  id: ID_Output;
}

export interface tmpCartPromise extends Promise<tmpCart>, Fragmentable {
  id: () => Promise<ID_Output>;
  selections: <T = FragmentableArray<Selection>>(args?: {
    where?: SelectionWhereInput;
    orderBy?: SelectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface tmpCartSubscription
  extends Promise<AsyncIterator<tmpCart>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  selections: <T = Promise<AsyncIterator<SelectionSubscription>>>(args?: {
    where?: SelectionWhereInput;
    orderBy?: SelectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface tmpCartNullablePromise
  extends Promise<tmpCart | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  selections: <T = FragmentableArray<Selection>>(args?: {
    where?: SelectionWhereInput;
    orderBy?: SelectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface tmpCartEdge {
  node: tmpCart;
  cursor: String;
}

export interface tmpCartEdgePromise extends Promise<tmpCartEdge>, Fragmentable {
  node: <T = tmpCartPromise>() => T;
  cursor: () => Promise<String>;
}

export interface tmpCartEdgeSubscription
  extends Promise<AsyncIterator<tmpCartEdge>>,
    Fragmentable {
  node: <T = tmpCartSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OrderSubscriptionPayload {
  mutation: MutationType;
  node: Order;
  updatedFields: String[];
  previousValues: OrderPreviousValues;
}

export interface OrderSubscriptionPayloadPromise
  extends Promise<OrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderPreviousValuesPromise>() => T;
}

export interface OrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderPreviousValuesSubscription>() => T;
}

export interface WishListEdge {
  node: WishList;
  cursor: String;
}

export interface WishListEdgePromise
  extends Promise<WishListEdge>,
    Fragmentable {
  node: <T = WishListPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WishListEdgeSubscription
  extends Promise<AsyncIterator<WishListEdge>>,
    Fragmentable {
  node: <T = WishListSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OrderPreviousValues {
  id: ID_Output;
  name: String;
  phone: String;
  email: String;
  orderNumber: String;
  recipient: String;
  recipientPhone: String;
  address: String;
  message?: String;
  info?: String;
  totalPrice?: Int;
  status?: String;
  payment?: String;
  createdAt: DateTimeOutput;
}

export interface OrderPreviousValuesPromise
  extends Promise<OrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  orderNumber: () => Promise<String>;
  recipient: () => Promise<String>;
  recipientPhone: () => Promise<String>;
  address: () => Promise<String>;
  message: () => Promise<String>;
  info: () => Promise<String>;
  totalPrice: () => Promise<Int>;
  status: () => Promise<String>;
  payment: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface OrderPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  orderNumber: () => Promise<AsyncIterator<String>>;
  recipient: () => Promise<AsyncIterator<String>>;
  recipientPhone: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  message: () => Promise<AsyncIterator<String>>;
  info: () => Promise<AsyncIterator<String>>;
  totalPrice: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<String>>;
  payment: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface Order {
  id: ID_Output;
  name: String;
  phone: String;
  email: String;
  orderNumber: String;
  recipient: String;
  recipientPhone: String;
  address: String;
  message?: String;
  info?: String;
  totalPrice?: Int;
  status?: String;
  payment?: String;
  createdAt: DateTimeOutput;
}

export interface OrderPromise extends Promise<Order>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  orderNumber: () => Promise<String>;
  selections: <T = FragmentableArray<Selection>>(args?: {
    where?: SelectionWhereInput;
    orderBy?: SelectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recipient: () => Promise<String>;
  recipientPhone: () => Promise<String>;
  address: () => Promise<String>;
  message: () => Promise<String>;
  info: () => Promise<String>;
  totalPrice: () => Promise<Int>;
  status: () => Promise<String>;
  payment: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface OrderSubscription
  extends Promise<AsyncIterator<Order>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  orderNumber: () => Promise<AsyncIterator<String>>;
  selections: <T = Promise<AsyncIterator<SelectionSubscription>>>(args?: {
    where?: SelectionWhereInput;
    orderBy?: SelectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recipient: () => Promise<AsyncIterator<String>>;
  recipientPhone: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  message: () => Promise<AsyncIterator<String>>;
  info: () => Promise<AsyncIterator<String>>;
  totalPrice: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<String>>;
  payment: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrderNullablePromise
  extends Promise<Order | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  orderNumber: () => Promise<String>;
  selections: <T = FragmentableArray<Selection>>(args?: {
    where?: SelectionWhereInput;
    orderBy?: SelectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recipient: () => Promise<String>;
  recipientPhone: () => Promise<String>;
  address: () => Promise<String>;
  message: () => Promise<String>;
  info: () => Promise<String>;
  totalPrice: () => Promise<Int>;
  status: () => Promise<String>;
  payment: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SelectionConnection {
  pageInfo: PageInfo;
  edges: SelectionEdge[];
}

export interface SelectionConnectionPromise
  extends Promise<SelectionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SelectionEdge>>() => T;
  aggregate: <T = AggregateSelectionPromise>() => T;
}

export interface SelectionConnectionSubscription
  extends Promise<AsyncIterator<SelectionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SelectionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSelectionSubscription>() => T;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface Question {
  id: ID_Output;
  QuestionType: String;
  username?: String;
  password?: String;
  contents: String;
  createdAt: DateTimeOutput;
}

export interface QuestionPromise extends Promise<Question>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  QuestionType: () => Promise<String>;
  product: <T = ProductPromise>() => T;
  username: () => Promise<String>;
  password: () => Promise<String>;
  contents: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  answer: <T = AnswerPromise>() => T;
}

export interface QuestionSubscription
  extends Promise<AsyncIterator<Question>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  QuestionType: () => Promise<AsyncIterator<String>>;
  product: <T = ProductSubscription>() => T;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  contents: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  answer: <T = AnswerSubscription>() => T;
}

export interface QuestionNullablePromise
  extends Promise<Question | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  QuestionType: () => Promise<String>;
  product: <T = ProductPromise>() => T;
  username: () => Promise<String>;
  password: () => Promise<String>;
  contents: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  answer: <T = AnswerPromise>() => T;
}

export interface ProductPreviousValues {
  id: ID_Output;
  name?: String;
  price?: Int;
  type?: String;
  colors: String[];
  sizes: String[];
  count?: Int;
  tags?: String;
  createdAt: DateTimeOutput;
  shippingFee?: Int;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  price: () => Promise<Int>;
  type: () => Promise<String>;
  colors: () => Promise<String[]>;
  sizes: () => Promise<String[]>;
  count: () => Promise<Int>;
  tags: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  shippingFee: () => Promise<Int>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<String>>;
  colors: () => Promise<AsyncIterator<String[]>>;
  sizes: () => Promise<AsyncIterator<String[]>>;
  count: () => Promise<AsyncIterator<Int>>;
  tags: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  shippingFee: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  username: String;
  password?: String;
  name?: String;
  address?: String;
  phone?: String;
  email?: String;
  mileage?: Int;
  createdAt: DateTimeOutput;
  fromCart?: Boolean;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  address: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  mileage: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  cart: <T = FragmentableArray<Cart>>(args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  wish: <T = FragmentableArray<WishList>>(args?: {
    where?: WishListWhereInput;
    orderBy?: WishListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  buying: <T = FragmentableArray<Order>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tmpOrder: <T = tmpCartPromise>() => T;
  fromCart: () => Promise<Boolean>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  mileage: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  cart: <T = Promise<AsyncIterator<CartSubscription>>>(args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  wish: <T = Promise<AsyncIterator<WishListSubscription>>>(args?: {
    where?: WishListWhereInput;
    orderBy?: WishListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  buying: <T = Promise<AsyncIterator<OrderSubscription>>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tmpOrder: <T = tmpCartSubscription>() => T;
  fromCart: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  address: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  mileage: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  cart: <T = FragmentableArray<Cart>>(args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  wish: <T = FragmentableArray<WishList>>(args?: {
    where?: WishListWhereInput;
    orderBy?: WishListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  buying: <T = FragmentableArray<Order>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tmpOrder: <T = tmpCartPromise>() => T;
  fromCart: () => Promise<Boolean>;
}

export interface WishList {
  id: ID_Output;
  createdAt: DateTimeOutput;
}

export interface WishListPromise extends Promise<WishList>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  selection: <T = SelectionPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface WishListSubscription
  extends Promise<AsyncIterator<WishList>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  selection: <T = SelectionSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WishListNullablePromise
  extends Promise<WishList | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  selection: <T = SelectionPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AggregateNotice {
  count: Int;
}

export interface AggregateNoticePromise
  extends Promise<AggregateNotice>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNoticeSubscription
  extends Promise<AsyncIterator<AggregateNotice>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface QuestionSubscriptionPayload {
  mutation: MutationType;
  node: Question;
  updatedFields: String[];
  previousValues: QuestionPreviousValues;
}

export interface QuestionSubscriptionPayloadPromise
  extends Promise<QuestionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = QuestionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QuestionPreviousValuesPromise>() => T;
}

export interface QuestionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QuestionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QuestionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QuestionPreviousValuesSubscription>() => T;
}

export interface Notice {
  id: ID_Output;
  subject: String;
  contents: String;
  createdAt: DateTimeOutput;
}

export interface NoticePromise extends Promise<Notice>, Fragmentable {
  id: () => Promise<ID_Output>;
  subject: () => Promise<String>;
  contents: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface NoticeSubscription
  extends Promise<AsyncIterator<Notice>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  subject: () => Promise<AsyncIterator<String>>;
  contents: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface NoticeNullablePromise
  extends Promise<Notice | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  subject: () => Promise<String>;
  contents: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface QuestionPreviousValues {
  id: ID_Output;
  QuestionType: String;
  username?: String;
  password?: String;
  contents: String;
  createdAt: DateTimeOutput;
}

export interface QuestionPreviousValuesPromise
  extends Promise<QuestionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  QuestionType: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  contents: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface QuestionPreviousValuesSubscription
  extends Promise<AsyncIterator<QuestionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  QuestionType: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  contents: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Cart {
  id: ID_Output;
  createdAt: DateTimeOutput;
}

export interface CartPromise extends Promise<Cart>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  selection: <T = SelectionPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CartSubscription
  extends Promise<AsyncIterator<Cart>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  selection: <T = SelectionSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CartNullablePromise
  extends Promise<Cart | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  selection: <T = SelectionPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface File {
  id: ID_Output;
  url: String;
  createdAt: DateTimeOutput;
}

export interface FilePromise extends Promise<File>, Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  product: <T = ProductPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface FileSubscription
  extends Promise<AsyncIterator<File>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  product: <T = ProductSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FileNullablePromise
  extends Promise<File | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  product: <T = ProductPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AggregateSelection {
  count: Int;
}

export interface AggregateSelectionPromise
  extends Promise<AggregateSelection>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSelectionSubscription
  extends Promise<AsyncIterator<AggregateSelection>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SelectionSubscriptionPayload {
  mutation: MutationType;
  node: Selection;
  updatedFields: String[];
  previousValues: SelectionPreviousValues;
}

export interface SelectionSubscriptionPayloadPromise
  extends Promise<SelectionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SelectionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SelectionPreviousValuesPromise>() => T;
}

export interface SelectionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SelectionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SelectionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SelectionPreviousValuesSubscription>() => T;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NoticeConnection {
  pageInfo: PageInfo;
  edges: NoticeEdge[];
}

export interface NoticeConnectionPromise
  extends Promise<NoticeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NoticeEdge>>() => T;
  aggregate: <T = AggregateNoticePromise>() => T;
}

export interface NoticeConnectionSubscription
  extends Promise<AsyncIterator<NoticeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NoticeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNoticeSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  password?: String;
  name?: String;
  address?: String;
  phone?: String;
  email?: String;
  mileage?: Int;
  createdAt: DateTimeOutput;
  fromCart?: Boolean;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  address: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  mileage: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  fromCart: () => Promise<Boolean>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  mileage: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  fromCart: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface Product {
  id: ID_Output;
  name?: String;
  price?: Int;
  type?: String;
  colors: String[];
  sizes: String[];
  count?: Int;
  tags?: String;
  createdAt: DateTimeOutput;
  shippingFee?: Int;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  price: () => Promise<Int>;
  type: () => Promise<String>;
  files: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  colors: () => Promise<String[]>;
  sizes: () => Promise<String[]>;
  count: () => Promise<Int>;
  tags: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  shippingFee: () => Promise<Int>;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<String>>;
  files: <T = Promise<AsyncIterator<FileSubscription>>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  colors: () => Promise<AsyncIterator<String[]>>;
  sizes: () => Promise<AsyncIterator<String[]>>;
  count: () => Promise<AsyncIterator<Int>>;
  tags: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  shippingFee: () => Promise<AsyncIterator<Int>>;
}

export interface ProductNullablePromise
  extends Promise<Product | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  price: () => Promise<Int>;
  type: () => Promise<String>;
  files: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  colors: () => Promise<String[]>;
  sizes: () => Promise<String[]>;
  count: () => Promise<Int>;
  tags: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  shippingFee: () => Promise<Int>;
}

export interface SelectionPreviousValues {
  id: ID_Output;
  count: Int;
  color?: String;
  size?: String;
}

export interface SelectionPreviousValuesPromise
  extends Promise<SelectionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  count: () => Promise<Int>;
  color: () => Promise<String>;
  size: () => Promise<String>;
}

export interface SelectionPreviousValuesSubscription
  extends Promise<AsyncIterator<SelectionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  count: () => Promise<AsyncIterator<Int>>;
  color: () => Promise<AsyncIterator<String>>;
  size: () => Promise<AsyncIterator<String>>;
}

export interface tmpCartSubscriptionPayload {
  mutation: MutationType;
  node: tmpCart;
  updatedFields: String[];
  previousValues: tmpCartPreviousValues;
}

export interface tmpCartSubscriptionPayloadPromise
  extends Promise<tmpCartSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = tmpCartPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = tmpCartPreviousValuesPromise>() => T;
}

export interface tmpCartSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<tmpCartSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = tmpCartSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = tmpCartPreviousValuesSubscription>() => T;
}

export interface OrderEdge {
  node: Order;
  cursor: String;
}

export interface OrderEdgePromise extends Promise<OrderEdge>, Fragmentable {
  node: <T = OrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEdgeSubscription
  extends Promise<AsyncIterator<OrderEdge>>,
    Fragmentable {
  node: <T = OrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface QuestionEdge {
  node: Question;
  cursor: String;
}

export interface QuestionEdgePromise
  extends Promise<QuestionEdge>,
    Fragmentable {
  node: <T = QuestionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface QuestionEdgeSubscription
  extends Promise<AsyncIterator<QuestionEdge>>,
    Fragmentable {
  node: <T = QuestionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "tmpCart",
    embedded: false
  },
  {
    name: "WishList",
    embedded: false
  },
  {
    name: "Cart",
    embedded: false
  },
  {
    name: "Selection",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "File",
    embedded: false
  },
  {
    name: "Order",
    embedded: false
  },
  {
    name: "Notice",
    embedded: false
  },
  {
    name: "Question",
    embedded: false
  },
  {
    name: "Answer",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
