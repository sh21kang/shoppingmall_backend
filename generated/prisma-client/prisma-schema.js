module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateAnswer {
  count: Int!
}

type AggregateCart {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateNotice {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateQuestion {
  count: Int!
}

type AggregateSelection {
  count: Int!
}

type AggregatetmpCart {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWishList {
  count: Int!
}

type Answer {
  id: ID!
  contents: String!
  createdAt: DateTime!
  question: Question!
}

type AnswerConnection {
  pageInfo: PageInfo!
  edges: [AnswerEdge]!
  aggregate: AggregateAnswer!
}

input AnswerCreateInput {
  id: ID
  contents: String!
  question: QuestionCreateOneWithoutAnswerInput!
}

input AnswerCreateOneWithoutQuestionInput {
  create: AnswerCreateWithoutQuestionInput
  connect: AnswerWhereUniqueInput
}

input AnswerCreateWithoutQuestionInput {
  id: ID
  contents: String!
}

type AnswerEdge {
  node: Answer!
  cursor: String!
}

enum AnswerOrderByInput {
  id_ASC
  id_DESC
  contents_ASC
  contents_DESC
  createdAt_ASC
  createdAt_DESC
}

type AnswerPreviousValues {
  id: ID!
  contents: String!
  createdAt: DateTime!
}

type AnswerSubscriptionPayload {
  mutation: MutationType!
  node: Answer
  updatedFields: [String!]
  previousValues: AnswerPreviousValues
}

input AnswerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AnswerWhereInput
  AND: [AnswerSubscriptionWhereInput!]
  OR: [AnswerSubscriptionWhereInput!]
  NOT: [AnswerSubscriptionWhereInput!]
}

input AnswerUpdateInput {
  contents: String
  question: QuestionUpdateOneRequiredWithoutAnswerInput
}

input AnswerUpdateManyMutationInput {
  contents: String
}

input AnswerUpdateOneWithoutQuestionInput {
  create: AnswerCreateWithoutQuestionInput
  update: AnswerUpdateWithoutQuestionDataInput
  upsert: AnswerUpsertWithoutQuestionInput
  delete: Boolean
  disconnect: Boolean
  connect: AnswerWhereUniqueInput
}

input AnswerUpdateWithoutQuestionDataInput {
  contents: String
}

input AnswerUpsertWithoutQuestionInput {
  update: AnswerUpdateWithoutQuestionDataInput!
  create: AnswerCreateWithoutQuestionInput!
}

input AnswerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  contents: String
  contents_not: String
  contents_in: [String!]
  contents_not_in: [String!]
  contents_lt: String
  contents_lte: String
  contents_gt: String
  contents_gte: String
  contents_contains: String
  contents_not_contains: String
  contents_starts_with: String
  contents_not_starts_with: String
  contents_ends_with: String
  contents_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  question: QuestionWhereInput
  AND: [AnswerWhereInput!]
  OR: [AnswerWhereInput!]
  NOT: [AnswerWhereInput!]
}

input AnswerWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

type Cart {
  id: ID!
  user: User!
  selection: Selection
  createdAt: DateTime!
}

type CartConnection {
  pageInfo: PageInfo!
  edges: [CartEdge]!
  aggregate: AggregateCart!
}

input CartCreateInput {
  id: ID
  user: UserCreateOneWithoutCartInput!
  selection: SelectionCreateOneInput
}

input CartCreateManyWithoutUserInput {
  create: [CartCreateWithoutUserInput!]
  connect: [CartWhereUniqueInput!]
}

input CartCreateWithoutUserInput {
  id: ID
  selection: SelectionCreateOneInput
}

type CartEdge {
  node: Cart!
  cursor: String!
}

enum CartOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
}

type CartPreviousValues {
  id: ID!
  createdAt: DateTime!
}

input CartScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [CartScalarWhereInput!]
  OR: [CartScalarWhereInput!]
  NOT: [CartScalarWhereInput!]
}

type CartSubscriptionPayload {
  mutation: MutationType!
  node: Cart
  updatedFields: [String!]
  previousValues: CartPreviousValues
}

input CartSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CartWhereInput
  AND: [CartSubscriptionWhereInput!]
  OR: [CartSubscriptionWhereInput!]
  NOT: [CartSubscriptionWhereInput!]
}

input CartUpdateInput {
  user: UserUpdateOneRequiredWithoutCartInput
  selection: SelectionUpdateOneInput
}

input CartUpdateManyWithoutUserInput {
  create: [CartCreateWithoutUserInput!]
  delete: [CartWhereUniqueInput!]
  connect: [CartWhereUniqueInput!]
  set: [CartWhereUniqueInput!]
  disconnect: [CartWhereUniqueInput!]
  update: [CartUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CartUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CartScalarWhereInput!]
}

input CartUpdateWithoutUserDataInput {
  selection: SelectionUpdateOneInput
}

input CartUpdateWithWhereUniqueWithoutUserInput {
  where: CartWhereUniqueInput!
  data: CartUpdateWithoutUserDataInput!
}

input CartUpsertWithWhereUniqueWithoutUserInput {
  where: CartWhereUniqueInput!
  update: CartUpdateWithoutUserDataInput!
  create: CartCreateWithoutUserInput!
}

input CartWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  selection: SelectionWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [CartWhereInput!]
  OR: [CartWhereInput!]
  NOT: [CartWhereInput!]
}

input CartWhereUniqueInput {
  id: ID
}

scalar DateTime

type File {
  id: ID!
  url: String!
  product: Product
  createdAt: DateTime!
}

type FileConnection {
  pageInfo: PageInfo!
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  id: ID
  url: String!
  product: ProductCreateOneWithoutFilesInput
}

input FileCreateManyWithoutProductInput {
  create: [FileCreateWithoutProductInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateWithoutProductInput {
  id: ID
  url: String!
}

type FileEdge {
  node: File!
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}

type FilePreviousValues {
  id: ID!
  url: String!
  createdAt: DateTime!
}

input FileScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [FileScalarWhereInput!]
  OR: [FileScalarWhereInput!]
  NOT: [FileScalarWhereInput!]
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FileWhereInput
  AND: [FileSubscriptionWhereInput!]
  OR: [FileSubscriptionWhereInput!]
  NOT: [FileSubscriptionWhereInput!]
}

input FileUpdateInput {
  url: String
  product: ProductUpdateOneWithoutFilesInput
}

input FileUpdateManyDataInput {
  url: String
}

input FileUpdateManyMutationInput {
  url: String
}

input FileUpdateManyWithoutProductInput {
  create: [FileCreateWithoutProductInput!]
  delete: [FileWhereUniqueInput!]
  connect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutProductInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutProductInput!]
  deleteMany: [FileScalarWhereInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
}

input FileUpdateManyWithWhereNestedInput {
  where: FileScalarWhereInput!
  data: FileUpdateManyDataInput!
}

input FileUpdateWithoutProductDataInput {
  url: String
}

input FileUpdateWithWhereUniqueWithoutProductInput {
  where: FileWhereUniqueInput!
  data: FileUpdateWithoutProductDataInput!
}

input FileUpsertWithWhereUniqueWithoutProductInput {
  where: FileWhereUniqueInput!
  update: FileUpdateWithoutProductDataInput!
  create: FileCreateWithoutProductInput!
}

input FileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  product: ProductWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
}

input FileWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createAnswer(data: AnswerCreateInput!): Answer!
  updateAnswer(data: AnswerUpdateInput!, where: AnswerWhereUniqueInput!): Answer
  updateManyAnswers(data: AnswerUpdateManyMutationInput!, where: AnswerWhereInput): BatchPayload!
  upsertAnswer(where: AnswerWhereUniqueInput!, create: AnswerCreateInput!, update: AnswerUpdateInput!): Answer!
  deleteAnswer(where: AnswerWhereUniqueInput!): Answer
  deleteManyAnswers(where: AnswerWhereInput): BatchPayload!
  createCart(data: CartCreateInput!): Cart!
  updateCart(data: CartUpdateInput!, where: CartWhereUniqueInput!): Cart
  upsertCart(where: CartWhereUniqueInput!, create: CartCreateInput!, update: CartUpdateInput!): Cart!
  deleteCart(where: CartWhereUniqueInput!): Cart
  deleteManyCarts(where: CartWhereInput): BatchPayload!
  createFile(data: FileCreateInput!): File!
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  deleteFile(where: FileWhereUniqueInput!): File
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  createNotice(data: NoticeCreateInput!): Notice!
  updateNotice(data: NoticeUpdateInput!, where: NoticeWhereUniqueInput!): Notice
  updateManyNotices(data: NoticeUpdateManyMutationInput!, where: NoticeWhereInput): BatchPayload!
  upsertNotice(where: NoticeWhereUniqueInput!, create: NoticeCreateInput!, update: NoticeUpdateInput!): Notice!
  deleteNotice(where: NoticeWhereUniqueInput!): Notice
  deleteManyNotices(where: NoticeWhereInput): BatchPayload!
  createOrder(data: OrderCreateInput!): Order!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createQuestion(data: QuestionCreateInput!): Question!
  updateQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question
  updateManyQuestions(data: QuestionUpdateManyMutationInput!, where: QuestionWhereInput): BatchPayload!
  upsertQuestion(where: QuestionWhereUniqueInput!, create: QuestionCreateInput!, update: QuestionUpdateInput!): Question!
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteManyQuestions(where: QuestionWhereInput): BatchPayload!
  createSelection(data: SelectionCreateInput!): Selection!
  updateSelection(data: SelectionUpdateInput!, where: SelectionWhereUniqueInput!): Selection
  updateManySelections(data: SelectionUpdateManyMutationInput!, where: SelectionWhereInput): BatchPayload!
  upsertSelection(where: SelectionWhereUniqueInput!, create: SelectionCreateInput!, update: SelectionUpdateInput!): Selection!
  deleteSelection(where: SelectionWhereUniqueInput!): Selection
  deleteManySelections(where: SelectionWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createWishList(data: WishListCreateInput!): WishList!
  updateWishList(data: WishListUpdateInput!, where: WishListWhereUniqueInput!): WishList
  upsertWishList(where: WishListWhereUniqueInput!, create: WishListCreateInput!, update: WishListUpdateInput!): WishList!
  deleteWishList(where: WishListWhereUniqueInput!): WishList
  deleteManyWishLists(where: WishListWhereInput): BatchPayload!
  createtmpCart(data: tmpCartCreateInput!): tmpCart!
  updatetmpCart(data: tmpCartUpdateInput!, where: tmpCartWhereUniqueInput!): tmpCart
  upserttmpCart(where: tmpCartWhereUniqueInput!, create: tmpCartCreateInput!, update: tmpCartUpdateInput!): tmpCart!
  deletetmpCart(where: tmpCartWhereUniqueInput!): tmpCart
  deleteManytmpCarts(where: tmpCartWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Notice {
  id: ID!
  subject: String!
  contents: String!
  createdAt: DateTime!
}

type NoticeConnection {
  pageInfo: PageInfo!
  edges: [NoticeEdge]!
  aggregate: AggregateNotice!
}

input NoticeCreateInput {
  id: ID
  subject: String!
  contents: String!
}

type NoticeEdge {
  node: Notice!
  cursor: String!
}

enum NoticeOrderByInput {
  id_ASC
  id_DESC
  subject_ASC
  subject_DESC
  contents_ASC
  contents_DESC
  createdAt_ASC
  createdAt_DESC
}

type NoticePreviousValues {
  id: ID!
  subject: String!
  contents: String!
  createdAt: DateTime!
}

type NoticeSubscriptionPayload {
  mutation: MutationType!
  node: Notice
  updatedFields: [String!]
  previousValues: NoticePreviousValues
}

input NoticeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NoticeWhereInput
  AND: [NoticeSubscriptionWhereInput!]
  OR: [NoticeSubscriptionWhereInput!]
  NOT: [NoticeSubscriptionWhereInput!]
}

input NoticeUpdateInput {
  subject: String
  contents: String
}

input NoticeUpdateManyMutationInput {
  subject: String
  contents: String
}

input NoticeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  subject: String
  subject_not: String
  subject_in: [String!]
  subject_not_in: [String!]
  subject_lt: String
  subject_lte: String
  subject_gt: String
  subject_gte: String
  subject_contains: String
  subject_not_contains: String
  subject_starts_with: String
  subject_not_starts_with: String
  subject_ends_with: String
  subject_not_ends_with: String
  contents: String
  contents_not: String
  contents_in: [String!]
  contents_not_in: [String!]
  contents_lt: String
  contents_lte: String
  contents_gt: String
  contents_gte: String
  contents_contains: String
  contents_not_contains: String
  contents_starts_with: String
  contents_not_starts_with: String
  contents_ends_with: String
  contents_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [NoticeWhereInput!]
  OR: [NoticeWhereInput!]
  NOT: [NoticeWhereInput!]
}

input NoticeWhereUniqueInput {
  id: ID
}

type Order {
  id: ID!
  user: User
  name: String!
  phone: String!
  email: String!
  orderNumber: String!
  selections(where: SelectionWhereInput, orderBy: SelectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Selection!]
  recipient: String!
  recipientPhone: String!
  address: String!
  message: String
  info: String
  totalPrice: Int
  status: String
  payment: String
  createdAt: DateTime!
}

type OrderConnection {
  pageInfo: PageInfo!
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  id: ID
  user: UserCreateOneWithoutBuyingInput
  name: String!
  phone: String!
  email: String!
  orderNumber: String!
  selections: SelectionCreateManyInput
  recipient: String!
  recipientPhone: String!
  address: String!
  message: String
  info: String
  totalPrice: Int
  status: String
  payment: String
}

input OrderCreateManyWithoutUserInput {
  create: [OrderCreateWithoutUserInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateWithoutUserInput {
  id: ID
  name: String!
  phone: String!
  email: String!
  orderNumber: String!
  selections: SelectionCreateManyInput
  recipient: String!
  recipientPhone: String!
  address: String!
  message: String
  info: String
  totalPrice: Int
  status: String
  payment: String
}

type OrderEdge {
  node: Order!
  cursor: String!
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  phone_ASC
  phone_DESC
  email_ASC
  email_DESC
  orderNumber_ASC
  orderNumber_DESC
  recipient_ASC
  recipient_DESC
  recipientPhone_ASC
  recipientPhone_DESC
  address_ASC
  address_DESC
  message_ASC
  message_DESC
  info_ASC
  info_DESC
  totalPrice_ASC
  totalPrice_DESC
  status_ASC
  status_DESC
  payment_ASC
  payment_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrderPreviousValues {
  id: ID!
  name: String!
  phone: String!
  email: String!
  orderNumber: String!
  recipient: String!
  recipientPhone: String!
  address: String!
  message: String
  info: String
  totalPrice: Int
  status: String
  payment: String
  createdAt: DateTime!
}

input OrderScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  orderNumber: String
  orderNumber_not: String
  orderNumber_in: [String!]
  orderNumber_not_in: [String!]
  orderNumber_lt: String
  orderNumber_lte: String
  orderNumber_gt: String
  orderNumber_gte: String
  orderNumber_contains: String
  orderNumber_not_contains: String
  orderNumber_starts_with: String
  orderNumber_not_starts_with: String
  orderNumber_ends_with: String
  orderNumber_not_ends_with: String
  recipient: String
  recipient_not: String
  recipient_in: [String!]
  recipient_not_in: [String!]
  recipient_lt: String
  recipient_lte: String
  recipient_gt: String
  recipient_gte: String
  recipient_contains: String
  recipient_not_contains: String
  recipient_starts_with: String
  recipient_not_starts_with: String
  recipient_ends_with: String
  recipient_not_ends_with: String
  recipientPhone: String
  recipientPhone_not: String
  recipientPhone_in: [String!]
  recipientPhone_not_in: [String!]
  recipientPhone_lt: String
  recipientPhone_lte: String
  recipientPhone_gt: String
  recipientPhone_gte: String
  recipientPhone_contains: String
  recipientPhone_not_contains: String
  recipientPhone_starts_with: String
  recipientPhone_not_starts_with: String
  recipientPhone_ends_with: String
  recipientPhone_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  info: String
  info_not: String
  info_in: [String!]
  info_not_in: [String!]
  info_lt: String
  info_lte: String
  info_gt: String
  info_gte: String
  info_contains: String
  info_not_contains: String
  info_starts_with: String
  info_not_starts_with: String
  info_ends_with: String
  info_not_ends_with: String
  totalPrice: Int
  totalPrice_not: Int
  totalPrice_in: [Int!]
  totalPrice_not_in: [Int!]
  totalPrice_lt: Int
  totalPrice_lte: Int
  totalPrice_gt: Int
  totalPrice_gte: Int
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  payment: String
  payment_not: String
  payment_in: [String!]
  payment_not_in: [String!]
  payment_lt: String
  payment_lte: String
  payment_gt: String
  payment_gte: String
  payment_contains: String
  payment_not_contains: String
  payment_starts_with: String
  payment_not_starts_with: String
  payment_ends_with: String
  payment_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [OrderScalarWhereInput!]
  OR: [OrderScalarWhereInput!]
  NOT: [OrderScalarWhereInput!]
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
  AND: [OrderSubscriptionWhereInput!]
  OR: [OrderSubscriptionWhereInput!]
  NOT: [OrderSubscriptionWhereInput!]
}

input OrderUpdateInput {
  user: UserUpdateOneWithoutBuyingInput
  name: String
  phone: String
  email: String
  orderNumber: String
  selections: SelectionUpdateManyInput
  recipient: String
  recipientPhone: String
  address: String
  message: String
  info: String
  totalPrice: Int
  status: String
  payment: String
}

input OrderUpdateManyDataInput {
  name: String
  phone: String
  email: String
  orderNumber: String
  recipient: String
  recipientPhone: String
  address: String
  message: String
  info: String
  totalPrice: Int
  status: String
  payment: String
}

input OrderUpdateManyMutationInput {
  name: String
  phone: String
  email: String
  orderNumber: String
  recipient: String
  recipientPhone: String
  address: String
  message: String
  info: String
  totalPrice: Int
  status: String
  payment: String
}

input OrderUpdateManyWithoutUserInput {
  create: [OrderCreateWithoutUserInput!]
  delete: [OrderWhereUniqueInput!]
  connect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [OrderScalarWhereInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
}

input OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput!
  data: OrderUpdateManyDataInput!
}

input OrderUpdateWithoutUserDataInput {
  name: String
  phone: String
  email: String
  orderNumber: String
  selections: SelectionUpdateManyInput
  recipient: String
  recipientPhone: String
  address: String
  message: String
  info: String
  totalPrice: Int
  status: String
  payment: String
}

input OrderUpdateWithWhereUniqueWithoutUserInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutUserDataInput!
}

input OrderUpsertWithWhereUniqueWithoutUserInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutUserDataInput!
  create: OrderCreateWithoutUserInput!
}

input OrderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  orderNumber: String
  orderNumber_not: String
  orderNumber_in: [String!]
  orderNumber_not_in: [String!]
  orderNumber_lt: String
  orderNumber_lte: String
  orderNumber_gt: String
  orderNumber_gte: String
  orderNumber_contains: String
  orderNumber_not_contains: String
  orderNumber_starts_with: String
  orderNumber_not_starts_with: String
  orderNumber_ends_with: String
  orderNumber_not_ends_with: String
  selections_every: SelectionWhereInput
  selections_some: SelectionWhereInput
  selections_none: SelectionWhereInput
  recipient: String
  recipient_not: String
  recipient_in: [String!]
  recipient_not_in: [String!]
  recipient_lt: String
  recipient_lte: String
  recipient_gt: String
  recipient_gte: String
  recipient_contains: String
  recipient_not_contains: String
  recipient_starts_with: String
  recipient_not_starts_with: String
  recipient_ends_with: String
  recipient_not_ends_with: String
  recipientPhone: String
  recipientPhone_not: String
  recipientPhone_in: [String!]
  recipientPhone_not_in: [String!]
  recipientPhone_lt: String
  recipientPhone_lte: String
  recipientPhone_gt: String
  recipientPhone_gte: String
  recipientPhone_contains: String
  recipientPhone_not_contains: String
  recipientPhone_starts_with: String
  recipientPhone_not_starts_with: String
  recipientPhone_ends_with: String
  recipientPhone_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  info: String
  info_not: String
  info_in: [String!]
  info_not_in: [String!]
  info_lt: String
  info_lte: String
  info_gt: String
  info_gte: String
  info_contains: String
  info_not_contains: String
  info_starts_with: String
  info_not_starts_with: String
  info_ends_with: String
  info_not_ends_with: String
  totalPrice: Int
  totalPrice_not: Int
  totalPrice_in: [Int!]
  totalPrice_not_in: [Int!]
  totalPrice_lt: Int
  totalPrice_lte: Int
  totalPrice_gt: Int
  totalPrice_gte: Int
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  payment: String
  payment_not: String
  payment_in: [String!]
  payment_not_in: [String!]
  payment_lt: String
  payment_lte: String
  payment_gt: String
  payment_gte: String
  payment_contains: String
  payment_not_contains: String
  payment_starts_with: String
  payment_not_starts_with: String
  payment_ends_with: String
  payment_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
}

input OrderWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Product {
  id: ID!
  name: String
  price: Int
  type: String
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  colors: [String!]!
  sizes: [String!]!
  count: Int
  tags: String
  createdAt: DateTime!
  shippingFee: Int
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreatecolorsInput {
  set: [String!]
}

input ProductCreateInput {
  id: ID
  name: String
  price: Int
  type: String
  files: FileCreateManyWithoutProductInput
  colors: ProductCreatecolorsInput
  sizes: ProductCreatesizesInput
  count: Int
  tags: String
  shippingFee: Int
}

input ProductCreateOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutFilesInput {
  create: ProductCreateWithoutFilesInput
  connect: ProductWhereUniqueInput
}

input ProductCreatesizesInput {
  set: [String!]
}

input ProductCreateWithoutFilesInput {
  id: ID
  name: String
  price: Int
  type: String
  colors: ProductCreatecolorsInput
  sizes: ProductCreatesizesInput
  count: Int
  tags: String
  shippingFee: Int
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  type_ASC
  type_DESC
  count_ASC
  count_DESC
  tags_ASC
  tags_DESC
  createdAt_ASC
  createdAt_DESC
  shippingFee_ASC
  shippingFee_DESC
}

type ProductPreviousValues {
  id: ID!
  name: String
  price: Int
  type: String
  colors: [String!]!
  sizes: [String!]!
  count: Int
  tags: String
  createdAt: DateTime!
  shippingFee: Int
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdatecolorsInput {
  set: [String!]
}

input ProductUpdateDataInput {
  name: String
  price: Int
  type: String
  files: FileUpdateManyWithoutProductInput
  colors: ProductUpdatecolorsInput
  sizes: ProductUpdatesizesInput
  count: Int
  tags: String
  shippingFee: Int
}

input ProductUpdateInput {
  name: String
  price: Int
  type: String
  files: FileUpdateManyWithoutProductInput
  colors: ProductUpdatecolorsInput
  sizes: ProductUpdatesizesInput
  count: Int
  tags: String
  shippingFee: Int
}

input ProductUpdateManyMutationInput {
  name: String
  price: Int
  type: String
  colors: ProductUpdatecolorsInput
  sizes: ProductUpdatesizesInput
  count: Int
  tags: String
  shippingFee: Int
}

input ProductUpdateOneInput {
  create: ProductCreateInput
  update: ProductUpdateDataInput
  upsert: ProductUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ProductWhereUniqueInput
}

input ProductUpdateOneWithoutFilesInput {
  create: ProductCreateWithoutFilesInput
  update: ProductUpdateWithoutFilesDataInput
  upsert: ProductUpsertWithoutFilesInput
  delete: Boolean
  disconnect: Boolean
  connect: ProductWhereUniqueInput
}

input ProductUpdatesizesInput {
  set: [String!]
}

input ProductUpdateWithoutFilesDataInput {
  name: String
  price: Int
  type: String
  colors: ProductUpdatecolorsInput
  sizes: ProductUpdatesizesInput
  count: Int
  tags: String
  shippingFee: Int
}

input ProductUpsertNestedInput {
  update: ProductUpdateDataInput!
  create: ProductCreateInput!
}

input ProductUpsertWithoutFilesInput {
  update: ProductUpdateWithoutFilesDataInput!
  create: ProductCreateWithoutFilesInput!
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  files_every: FileWhereInput
  files_some: FileWhereInput
  files_none: FileWhereInput
  count: Int
  count_not: Int
  count_in: [Int!]
  count_not_in: [Int!]
  count_lt: Int
  count_lte: Int
  count_gt: Int
  count_gte: Int
  tags: String
  tags_not: String
  tags_in: [String!]
  tags_not_in: [String!]
  tags_lt: String
  tags_lte: String
  tags_gt: String
  tags_gte: String
  tags_contains: String
  tags_not_contains: String
  tags_starts_with: String
  tags_not_starts_with: String
  tags_ends_with: String
  tags_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  shippingFee: Int
  shippingFee_not: Int
  shippingFee_in: [Int!]
  shippingFee_not_in: [Int!]
  shippingFee_lt: Int
  shippingFee_lte: Int
  shippingFee_gt: Int
  shippingFee_gte: Int
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  answer(where: AnswerWhereUniqueInput!): Answer
  answers(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Answer]!
  answersConnection(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AnswerConnection!
  cart(where: CartWhereUniqueInput!): Cart
  carts(where: CartWhereInput, orderBy: CartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cart]!
  cartsConnection(where: CartWhereInput, orderBy: CartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CartConnection!
  file(where: FileWhereUniqueInput!): File
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  notice(where: NoticeWhereUniqueInput!): Notice
  notices(where: NoticeWhereInput, orderBy: NoticeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notice]!
  noticesConnection(where: NoticeWhereInput, orderBy: NoticeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NoticeConnection!
  order(where: OrderWhereUniqueInput!): Order
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  question(where: QuestionWhereUniqueInput!): Question
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question]!
  questionsConnection(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionConnection!
  selection(where: SelectionWhereUniqueInput!): Selection
  selections(where: SelectionWhereInput, orderBy: SelectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Selection]!
  selectionsConnection(where: SelectionWhereInput, orderBy: SelectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SelectionConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  wishList(where: WishListWhereUniqueInput!): WishList
  wishLists(where: WishListWhereInput, orderBy: WishListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WishList]!
  wishListsConnection(where: WishListWhereInput, orderBy: WishListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WishListConnection!
  tmpCart(where: tmpCartWhereUniqueInput!): tmpCart
  tmpCarts(where: tmpCartWhereInput, orderBy: tmpCartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [tmpCart]!
  tmpCartsConnection(where: tmpCartWhereInput, orderBy: tmpCartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): tmpCartConnection!
  node(id: ID!): Node
}

type Question {
  id: ID!
  user: User
  QuestionType: String!
  product: Product
  username: String
  password: String
  contents: String!
  createdAt: DateTime!
  answer: Answer
}

type QuestionConnection {
  pageInfo: PageInfo!
  edges: [QuestionEdge]!
  aggregate: AggregateQuestion!
}

input QuestionCreateInput {
  id: ID
  user: UserCreateOneInput
  QuestionType: String!
  product: ProductCreateOneInput
  username: String
  password: String
  contents: String!
  answer: AnswerCreateOneWithoutQuestionInput
}

input QuestionCreateOneWithoutAnswerInput {
  create: QuestionCreateWithoutAnswerInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateWithoutAnswerInput {
  id: ID
  user: UserCreateOneInput
  QuestionType: String!
  product: ProductCreateOneInput
  username: String
  password: String
  contents: String!
}

type QuestionEdge {
  node: Question!
  cursor: String!
}

enum QuestionOrderByInput {
  id_ASC
  id_DESC
  QuestionType_ASC
  QuestionType_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  contents_ASC
  contents_DESC
  createdAt_ASC
  createdAt_DESC
}

type QuestionPreviousValues {
  id: ID!
  QuestionType: String!
  username: String
  password: String
  contents: String!
  createdAt: DateTime!
}

type QuestionSubscriptionPayload {
  mutation: MutationType!
  node: Question
  updatedFields: [String!]
  previousValues: QuestionPreviousValues
}

input QuestionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QuestionWhereInput
  AND: [QuestionSubscriptionWhereInput!]
  OR: [QuestionSubscriptionWhereInput!]
  NOT: [QuestionSubscriptionWhereInput!]
}

input QuestionUpdateInput {
  user: UserUpdateOneInput
  QuestionType: String
  product: ProductUpdateOneInput
  username: String
  password: String
  contents: String
  answer: AnswerUpdateOneWithoutQuestionInput
}

input QuestionUpdateManyMutationInput {
  QuestionType: String
  username: String
  password: String
  contents: String
}

input QuestionUpdateOneRequiredWithoutAnswerInput {
  create: QuestionCreateWithoutAnswerInput
  update: QuestionUpdateWithoutAnswerDataInput
  upsert: QuestionUpsertWithoutAnswerInput
  connect: QuestionWhereUniqueInput
}

input QuestionUpdateWithoutAnswerDataInput {
  user: UserUpdateOneInput
  QuestionType: String
  product: ProductUpdateOneInput
  username: String
  password: String
  contents: String
}

input QuestionUpsertWithoutAnswerInput {
  update: QuestionUpdateWithoutAnswerDataInput!
  create: QuestionCreateWithoutAnswerInput!
}

input QuestionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  QuestionType: String
  QuestionType_not: String
  QuestionType_in: [String!]
  QuestionType_not_in: [String!]
  QuestionType_lt: String
  QuestionType_lte: String
  QuestionType_gt: String
  QuestionType_gte: String
  QuestionType_contains: String
  QuestionType_not_contains: String
  QuestionType_starts_with: String
  QuestionType_not_starts_with: String
  QuestionType_ends_with: String
  QuestionType_not_ends_with: String
  product: ProductWhereInput
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  contents: String
  contents_not: String
  contents_in: [String!]
  contents_not_in: [String!]
  contents_lt: String
  contents_lte: String
  contents_gt: String
  contents_gte: String
  contents_contains: String
  contents_not_contains: String
  contents_starts_with: String
  contents_not_starts_with: String
  contents_ends_with: String
  contents_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  answer: AnswerWhereInput
  AND: [QuestionWhereInput!]
  OR: [QuestionWhereInput!]
  NOT: [QuestionWhereInput!]
}

input QuestionWhereUniqueInput {
  id: ID
}

type Selection {
  id: ID!
  count: Int!
  color: String
  size: String
  product: Product
}

type SelectionConnection {
  pageInfo: PageInfo!
  edges: [SelectionEdge]!
  aggregate: AggregateSelection!
}

input SelectionCreateInput {
  id: ID
  count: Int!
  color: String
  size: String
  product: ProductCreateOneInput
}

input SelectionCreateManyInput {
  create: [SelectionCreateInput!]
  connect: [SelectionWhereUniqueInput!]
}

input SelectionCreateOneInput {
  create: SelectionCreateInput
  connect: SelectionWhereUniqueInput
}

type SelectionEdge {
  node: Selection!
  cursor: String!
}

enum SelectionOrderByInput {
  id_ASC
  id_DESC
  count_ASC
  count_DESC
  color_ASC
  color_DESC
  size_ASC
  size_DESC
}

type SelectionPreviousValues {
  id: ID!
  count: Int!
  color: String
  size: String
}

input SelectionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  count: Int
  count_not: Int
  count_in: [Int!]
  count_not_in: [Int!]
  count_lt: Int
  count_lte: Int
  count_gt: Int
  count_gte: Int
  color: String
  color_not: String
  color_in: [String!]
  color_not_in: [String!]
  color_lt: String
  color_lte: String
  color_gt: String
  color_gte: String
  color_contains: String
  color_not_contains: String
  color_starts_with: String
  color_not_starts_with: String
  color_ends_with: String
  color_not_ends_with: String
  size: String
  size_not: String
  size_in: [String!]
  size_not_in: [String!]
  size_lt: String
  size_lte: String
  size_gt: String
  size_gte: String
  size_contains: String
  size_not_contains: String
  size_starts_with: String
  size_not_starts_with: String
  size_ends_with: String
  size_not_ends_with: String
  AND: [SelectionScalarWhereInput!]
  OR: [SelectionScalarWhereInput!]
  NOT: [SelectionScalarWhereInput!]
}

type SelectionSubscriptionPayload {
  mutation: MutationType!
  node: Selection
  updatedFields: [String!]
  previousValues: SelectionPreviousValues
}

input SelectionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SelectionWhereInput
  AND: [SelectionSubscriptionWhereInput!]
  OR: [SelectionSubscriptionWhereInput!]
  NOT: [SelectionSubscriptionWhereInput!]
}

input SelectionUpdateDataInput {
  count: Int
  color: String
  size: String
  product: ProductUpdateOneInput
}

input SelectionUpdateInput {
  count: Int
  color: String
  size: String
  product: ProductUpdateOneInput
}

input SelectionUpdateManyDataInput {
  count: Int
  color: String
  size: String
}

input SelectionUpdateManyInput {
  create: [SelectionCreateInput!]
  update: [SelectionUpdateWithWhereUniqueNestedInput!]
  upsert: [SelectionUpsertWithWhereUniqueNestedInput!]
  delete: [SelectionWhereUniqueInput!]
  connect: [SelectionWhereUniqueInput!]
  set: [SelectionWhereUniqueInput!]
  disconnect: [SelectionWhereUniqueInput!]
  deleteMany: [SelectionScalarWhereInput!]
  updateMany: [SelectionUpdateManyWithWhereNestedInput!]
}

input SelectionUpdateManyMutationInput {
  count: Int
  color: String
  size: String
}

input SelectionUpdateManyWithWhereNestedInput {
  where: SelectionScalarWhereInput!
  data: SelectionUpdateManyDataInput!
}

input SelectionUpdateOneInput {
  create: SelectionCreateInput
  update: SelectionUpdateDataInput
  upsert: SelectionUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: SelectionWhereUniqueInput
}

input SelectionUpdateWithWhereUniqueNestedInput {
  where: SelectionWhereUniqueInput!
  data: SelectionUpdateDataInput!
}

input SelectionUpsertNestedInput {
  update: SelectionUpdateDataInput!
  create: SelectionCreateInput!
}

input SelectionUpsertWithWhereUniqueNestedInput {
  where: SelectionWhereUniqueInput!
  update: SelectionUpdateDataInput!
  create: SelectionCreateInput!
}

input SelectionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  count: Int
  count_not: Int
  count_in: [Int!]
  count_not_in: [Int!]
  count_lt: Int
  count_lte: Int
  count_gt: Int
  count_gte: Int
  color: String
  color_not: String
  color_in: [String!]
  color_not_in: [String!]
  color_lt: String
  color_lte: String
  color_gt: String
  color_gte: String
  color_contains: String
  color_not_contains: String
  color_starts_with: String
  color_not_starts_with: String
  color_ends_with: String
  color_not_ends_with: String
  size: String
  size_not: String
  size_in: [String!]
  size_not_in: [String!]
  size_lt: String
  size_lte: String
  size_gt: String
  size_gte: String
  size_contains: String
  size_not_contains: String
  size_starts_with: String
  size_not_starts_with: String
  size_ends_with: String
  size_not_ends_with: String
  product: ProductWhereInput
  AND: [SelectionWhereInput!]
  OR: [SelectionWhereInput!]
  NOT: [SelectionWhereInput!]
}

input SelectionWhereUniqueInput {
  id: ID
}

type Subscription {
  answer(where: AnswerSubscriptionWhereInput): AnswerSubscriptionPayload
  cart(where: CartSubscriptionWhereInput): CartSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  notice(where: NoticeSubscriptionWhereInput): NoticeSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  question(where: QuestionSubscriptionWhereInput): QuestionSubscriptionPayload
  selection(where: SelectionSubscriptionWhereInput): SelectionSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  wishList(where: WishListSubscriptionWhereInput): WishListSubscriptionPayload
  tmpCart(where: tmpCartSubscriptionWhereInput): tmpCartSubscriptionPayload
}

type tmpCart {
  id: ID!
  selections(where: SelectionWhereInput, orderBy: SelectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Selection!]
}

type tmpCartConnection {
  pageInfo: PageInfo!
  edges: [tmpCartEdge]!
  aggregate: AggregatetmpCart!
}

input tmpCartCreateInput {
  id: ID
  selections: SelectionCreateManyInput
}

input tmpCartCreateOneInput {
  create: tmpCartCreateInput
  connect: tmpCartWhereUniqueInput
}

type tmpCartEdge {
  node: tmpCart!
  cursor: String!
}

enum tmpCartOrderByInput {
  id_ASC
  id_DESC
}

type tmpCartPreviousValues {
  id: ID!
}

type tmpCartSubscriptionPayload {
  mutation: MutationType!
  node: tmpCart
  updatedFields: [String!]
  previousValues: tmpCartPreviousValues
}

input tmpCartSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: tmpCartWhereInput
  AND: [tmpCartSubscriptionWhereInput!]
  OR: [tmpCartSubscriptionWhereInput!]
  NOT: [tmpCartSubscriptionWhereInput!]
}

input tmpCartUpdateDataInput {
  selections: SelectionUpdateManyInput
}

input tmpCartUpdateInput {
  selections: SelectionUpdateManyInput
}

input tmpCartUpdateOneInput {
  create: tmpCartCreateInput
  update: tmpCartUpdateDataInput
  upsert: tmpCartUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: tmpCartWhereUniqueInput
}

input tmpCartUpsertNestedInput {
  update: tmpCartUpdateDataInput!
  create: tmpCartCreateInput!
}

input tmpCartWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  selections_every: SelectionWhereInput
  selections_some: SelectionWhereInput
  selections_none: SelectionWhereInput
  AND: [tmpCartWhereInput!]
  OR: [tmpCartWhereInput!]
  NOT: [tmpCartWhereInput!]
}

input tmpCartWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  username: String!
  password: String
  name: String
  address: String
  phone: String
  email: String
  mileage: Int
  createdAt: DateTime!
  cart(where: CartWhereInput, orderBy: CartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cart!]
  wish(where: WishListWhereInput, orderBy: WishListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WishList!]
  buying(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
  tmpOrder: tmpCart
  fromCart: Boolean
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  password: String
  name: String
  address: String
  phone: String
  email: String
  mileage: Int
  cart: CartCreateManyWithoutUserInput
  wish: WishListCreateManyWithoutUserInput
  buying: OrderCreateManyWithoutUserInput
  tmpOrder: tmpCartCreateOneInput
  fromCart: Boolean
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutBuyingInput {
  create: UserCreateWithoutBuyingInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCartInput {
  create: UserCreateWithoutCartInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutWishInput {
  create: UserCreateWithoutWishInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBuyingInput {
  id: ID
  username: String!
  password: String
  name: String
  address: String
  phone: String
  email: String
  mileage: Int
  cart: CartCreateManyWithoutUserInput
  wish: WishListCreateManyWithoutUserInput
  tmpOrder: tmpCartCreateOneInput
  fromCart: Boolean
}

input UserCreateWithoutCartInput {
  id: ID
  username: String!
  password: String
  name: String
  address: String
  phone: String
  email: String
  mileage: Int
  wish: WishListCreateManyWithoutUserInput
  buying: OrderCreateManyWithoutUserInput
  tmpOrder: tmpCartCreateOneInput
  fromCart: Boolean
}

input UserCreateWithoutWishInput {
  id: ID
  username: String!
  password: String
  name: String
  address: String
  phone: String
  email: String
  mileage: Int
  cart: CartCreateManyWithoutUserInput
  buying: OrderCreateManyWithoutUserInput
  tmpOrder: tmpCartCreateOneInput
  fromCart: Boolean
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  address_ASC
  address_DESC
  phone_ASC
  phone_DESC
  email_ASC
  email_DESC
  mileage_ASC
  mileage_DESC
  createdAt_ASC
  createdAt_DESC
  fromCart_ASC
  fromCart_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  password: String
  name: String
  address: String
  phone: String
  email: String
  mileage: Int
  createdAt: DateTime!
  fromCart: Boolean
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  username: String
  password: String
  name: String
  address: String
  phone: String
  email: String
  mileage: Int
  cart: CartUpdateManyWithoutUserInput
  wish: WishListUpdateManyWithoutUserInput
  buying: OrderUpdateManyWithoutUserInput
  tmpOrder: tmpCartUpdateOneInput
  fromCart: Boolean
}

input UserUpdateInput {
  username: String
  password: String
  name: String
  address: String
  phone: String
  email: String
  mileage: Int
  cart: CartUpdateManyWithoutUserInput
  wish: WishListUpdateManyWithoutUserInput
  buying: OrderUpdateManyWithoutUserInput
  tmpOrder: tmpCartUpdateOneInput
  fromCart: Boolean
}

input UserUpdateManyMutationInput {
  username: String
  password: String
  name: String
  address: String
  phone: String
  email: String
  mileage: Int
  fromCart: Boolean
}

input UserUpdateOneInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCartInput {
  create: UserCreateWithoutCartInput
  update: UserUpdateWithoutCartDataInput
  upsert: UserUpsertWithoutCartInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutWishInput {
  create: UserCreateWithoutWishInput
  update: UserUpdateWithoutWishDataInput
  upsert: UserUpsertWithoutWishInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutBuyingInput {
  create: UserCreateWithoutBuyingInput
  update: UserUpdateWithoutBuyingDataInput
  upsert: UserUpsertWithoutBuyingInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutBuyingDataInput {
  username: String
  password: String
  name: String
  address: String
  phone: String
  email: String
  mileage: Int
  cart: CartUpdateManyWithoutUserInput
  wish: WishListUpdateManyWithoutUserInput
  tmpOrder: tmpCartUpdateOneInput
  fromCart: Boolean
}

input UserUpdateWithoutCartDataInput {
  username: String
  password: String
  name: String
  address: String
  phone: String
  email: String
  mileage: Int
  wish: WishListUpdateManyWithoutUserInput
  buying: OrderUpdateManyWithoutUserInput
  tmpOrder: tmpCartUpdateOneInput
  fromCart: Boolean
}

input UserUpdateWithoutWishDataInput {
  username: String
  password: String
  name: String
  address: String
  phone: String
  email: String
  mileage: Int
  cart: CartUpdateManyWithoutUserInput
  buying: OrderUpdateManyWithoutUserInput
  tmpOrder: tmpCartUpdateOneInput
  fromCart: Boolean
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutBuyingInput {
  update: UserUpdateWithoutBuyingDataInput!
  create: UserCreateWithoutBuyingInput!
}

input UserUpsertWithoutCartInput {
  update: UserUpdateWithoutCartDataInput!
  create: UserCreateWithoutCartInput!
}

input UserUpsertWithoutWishInput {
  update: UserUpdateWithoutWishDataInput!
  create: UserCreateWithoutWishInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  mileage: Int
  mileage_not: Int
  mileage_in: [Int!]
  mileage_not_in: [Int!]
  mileage_lt: Int
  mileage_lte: Int
  mileage_gt: Int
  mileage_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  cart_every: CartWhereInput
  cart_some: CartWhereInput
  cart_none: CartWhereInput
  wish_every: WishListWhereInput
  wish_some: WishListWhereInput
  wish_none: WishListWhereInput
  buying_every: OrderWhereInput
  buying_some: OrderWhereInput
  buying_none: OrderWhereInput
  tmpOrder: tmpCartWhereInput
  fromCart: Boolean
  fromCart_not: Boolean
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
}

type WishList {
  id: ID!
  user: User!
  selection: Selection
  createdAt: DateTime!
}

type WishListConnection {
  pageInfo: PageInfo!
  edges: [WishListEdge]!
  aggregate: AggregateWishList!
}

input WishListCreateInput {
  id: ID
  user: UserCreateOneWithoutWishInput!
  selection: SelectionCreateOneInput
}

input WishListCreateManyWithoutUserInput {
  create: [WishListCreateWithoutUserInput!]
  connect: [WishListWhereUniqueInput!]
}

input WishListCreateWithoutUserInput {
  id: ID
  selection: SelectionCreateOneInput
}

type WishListEdge {
  node: WishList!
  cursor: String!
}

enum WishListOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
}

type WishListPreviousValues {
  id: ID!
  createdAt: DateTime!
}

input WishListScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [WishListScalarWhereInput!]
  OR: [WishListScalarWhereInput!]
  NOT: [WishListScalarWhereInput!]
}

type WishListSubscriptionPayload {
  mutation: MutationType!
  node: WishList
  updatedFields: [String!]
  previousValues: WishListPreviousValues
}

input WishListSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WishListWhereInput
  AND: [WishListSubscriptionWhereInput!]
  OR: [WishListSubscriptionWhereInput!]
  NOT: [WishListSubscriptionWhereInput!]
}

input WishListUpdateInput {
  user: UserUpdateOneRequiredWithoutWishInput
  selection: SelectionUpdateOneInput
}

input WishListUpdateManyWithoutUserInput {
  create: [WishListCreateWithoutUserInput!]
  delete: [WishListWhereUniqueInput!]
  connect: [WishListWhereUniqueInput!]
  set: [WishListWhereUniqueInput!]
  disconnect: [WishListWhereUniqueInput!]
  update: [WishListUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [WishListUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [WishListScalarWhereInput!]
}

input WishListUpdateWithoutUserDataInput {
  selection: SelectionUpdateOneInput
}

input WishListUpdateWithWhereUniqueWithoutUserInput {
  where: WishListWhereUniqueInput!
  data: WishListUpdateWithoutUserDataInput!
}

input WishListUpsertWithWhereUniqueWithoutUserInput {
  where: WishListWhereUniqueInput!
  update: WishListUpdateWithoutUserDataInput!
  create: WishListCreateWithoutUserInput!
}

input WishListWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  selection: SelectionWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [WishListWhereInput!]
  OR: [WishListWhereInput!]
  NOT: [WishListWhereInput!]
}

input WishListWhereUniqueInput {
  id: ID
}
`
      }
    